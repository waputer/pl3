


tydef st:list {
	cpt:char path;
	pt:st:list next;
};

def void(pt:st:list list) list_clear = {
	var pt:st:list tmp;

	while(list != null) {
		list = (tmp = list)->next;
		mem:free(tmp);
	}
};


def[export] void(pt:pt:char args) run = {
	var pt:st:pl3:top top;
	var pt:st:list iter, list = null, imp = null;
	var pt:pt:st:list ilist = &list, iimp = &imp;

	var u32 i;
	var cpt:char out = null, exp = null;
	var i64 mark;
	var u32 rd, chk, gen;

	for(i = 1; args[i] != null; i++) {
		if(str:equal(args[i], "--version")) {
			print("pl3-1.0.0-dev3\n");
			os:exit(0);
		}
		else if(str:equal(args[i], "-o")) {
			i++;
			if(args[i] == null)
				fatal("Unexpected end of arguments.");

			out = args[i];
		}
		else if(str:equal(args[i], "-e")) {
			i++;
			if(args[i] == null)
				fatal("Unexpected end of arguments.");

			exp = args[i];
		}
		else if(str:equal(args[i], "-i")) {
			i++;
			if(args[i] == null)
				fatal("Unexpected end of arguments.");

			*iimp = mem:make(st:list{ args[i], null });
			iimp = &(*iimp)->next;
		}
		else {
			*ilist = mem:make(st:list{ args[i], null });
			ilist = &(*ilist)->next;
		}
	}

	if(out == null)
		fatal("Require output file '-o'.");

	top = pl3:top_new();
	onerr pl3:top_delete(top);

	for(iter = imp; iter != null; iter = iter->next)
		e:req(pl3:top_load(top, iter->path));

	{
		mark = tm:usec();

		for(iter = list; iter != null; iter = iter->next)
			e:req(pl3:parse(iter->path, pl3:top_unit(top)));

		rd = u32{tm:usec() - mark};
		//print("parse %ums\n", rd / 1000);
	}

	{
		mark = tm:usec();

		e:req(pl3:check_brief(top));

		chk = u32{tm:usec() - mark};
		//print("check %ums\n", chk / 1000);
	}

	{
		mark = tm:usec();

		e:req(pl3:llvm(top, out));

		gen = u32{tm:usec() - mark};
		//print("gen   %ums\n", gen / 1000);
	}

	if(exp != null)
		e:req(pl3:export(top, exp));
	
	pl3:top_delete(top);
	list_clear(list);
	list_clear(imp);

	//print("tot   %ums\n", (rd + chk + gen) / 1000);

	mem:assert();
};

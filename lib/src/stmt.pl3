/**
 * Statement structure.
 *   @tag: The tag.
 *   @data: The data.
 *   @meta: The metadata.
 *   @next: The next statement.
 */
tydef[export] en:pl3:stmt { empty, decl, tydecl, expr, ret, block, cond, loop, brk, cont, sw, cas, dflt, "onerr", eret };
tydef[export] un:pl3:stmt { u32 depth; pt:st:pl3:decl decl; pt:st:pl3:tydecl tydecl; pt:st:pl3:expr expr; st:pl3:block block; pt:st:pl3:cond cond; pt:st:pl3:loop loop; pt:st:pl3:sw sw; pt:st:pl3:cas cas; pt:st:pl3:stmt stmt; };
tydef[export] st:pl3:stmt {
	en:pl3:stmt tag;
	un:pl3:stmt data;
	st:pl3:meta meta;

	pt:st:pl3:stmt next;
};


/**
 * Create a statement.
 *   @tag: The tag.
 *   @data: Consumed. The data.
 *   @meta: Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(en:pl3:stmt tag, un:pl3:stmt data, st:pl3:meta meta) pl3:stmt_new = {
	return mem:make(st:pl3:stmt{ tag, data, meta, null });
};

/**
 * Delete a statement.
 *   @stmt: The statement.
 */
def[export] void(pt:st:pl3:stmt stmt) pl3:stmt_delete = {
	switch(stmt->tag) {
	case ev:pl3:stmt:empty: break;
	case ev:pl3:stmt:decl: pl3:decl_delete(stmt->data.decl); break;
	case ev:pl3:stmt:tydecl: pl3:tydecl_delete(stmt->data.tydecl); break;
	case ev:pl3:stmt:expr: pl3:expr_delete(stmt->data.expr); break;
	case ev:pl3:stmt:ret: if(stmt->data.expr != null) pl3:expr_delete(stmt->data.expr); break;
	case ev:pl3:stmt:block: pl3:block_delete(stmt->data.block); break;
	case ev:pl3:stmt:cond: pl3:cond_delete(stmt->data.cond); break;
	case ev:pl3:stmt:loop: pl3:loop_delete(stmt->data.loop); break;
	case ev:pl3:stmt:brk: break;
	case ev:pl3:stmt:cont: break;
	case ev:pl3:stmt:sw: pl3:sw_delete(stmt->data.sw); break;
	case ev:pl3:stmt:cas: pl3:cas_delete(stmt->data.cas); break;
	case ev:pl3:stmt:dflt: break;
	case ev:pl3:stmt:onerr: pl3:stmt_delete(stmt->data.stmt); break;
	case ev:pl3:stmt:eret: pl3:expr_delete(stmt->data.expr); break;
	default: fatal("FIXME");
	}

	pl3:meta_delete(stmt->meta);
	mem:free(stmt);
};

/**
 * Delete an entire list of statements.
 *   @stmt: The statement list.
 */
def[export] void(pt:st:pl3:stmt stmt) pl3:stmt_clear = {
	var pt:st:pl3:stmt tmp;

	while(stmt != null) {
		stmt = (tmp = stmt)->next;
		pl3:stmt_delete(tmp);
	}
};


/**
 * Create an empty statement.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(st:pl3:meta meta) pl3:stmt_empty = {
	return pl3:stmt_new(ev:pl3:stmt:empty, un:pl3:stmt{ }, meta);
};

/**
 * Create a declaration statement.
 *   @decl: Consumed. The declaration.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(pt:st:pl3:decl decl, st:pl3:meta meta) pl3:stmt_decl = {
	return pl3:stmt_new(ev:pl3:stmt:decl, un:pl3:stmt{ .decl = decl }, meta);
};

/**
 * Create a type declaration statement.
 *   @tydecl: Consumed. The type declaration.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(pt:st:pl3:tydecl tydecl, st:pl3:meta meta) pl3:stmt_tydecl = {
	return pl3:stmt_new(ev:pl3:stmt:tydecl, un:pl3:stmt{ .tydecl = tydecl }, meta);
};

/**
 * Create an expression statement.
 *   @expr: Consumed. The expression.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(pt:st:pl3:expr expr, st:pl3:meta meta) pl3:stmt_expr = {
	return pl3:stmt_new(ev:pl3:stmt:expr, un:pl3:stmt{ .expr = expr }, meta);
};

/**
 * Create an return statement.
 *   @expr: Consumed. The expression.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(pt:st:pl3:expr expr, st:pl3:meta meta) pl3:stmt_ret = {
	return pl3:stmt_new(ev:pl3:stmt:ret, un:pl3:stmt{ .expr = expr }, meta);
};

/**
 * Create a block statement.
 *   @block: Consumed. The block.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(st:pl3:block block, st:pl3:meta meta) pl3:stmt_block = {
	return pl3:stmt_new(ev:pl3:stmt:block, un:pl3:stmt{ .block = block }, meta);
};

/**
 * Create a conditional statement.
 *   @cond: Consumed. The conditional.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(pt:st:pl3:cond cond, st:pl3:meta meta) pl3:stmt_cond = {
	return pl3:stmt_new(ev:pl3:stmt:cond, un:pl3:stmt{ .cond = cond }, meta);
};

/**
 * Create a loop statement.
 *   @loop: Consumed. The loop.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(pt:st:pl3:loop loop, st:pl3:meta meta) pl3:stmt_loop = {
	return pl3:stmt_new(ev:pl3:stmt:loop, un:pl3:stmt{ .loop = loop }, meta);
};

/**
 * Create a break statement.
 *   @depth: The nested depth.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(u32 depth, st:pl3:meta meta) pl3:stmt_brk = {
	return pl3:stmt_new(ev:pl3:stmt:brk, un:pl3:stmt{ .depth = depth }, meta);
};

/**
 * Create a continue statement.
 *   @depth: The nested depth.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(u32 depth, st:pl3:meta meta) pl3:stmt_cont = {
	return pl3:stmt_new(ev:pl3:stmt:cont, un:pl3:stmt{ .depth = depth }, meta);
};

/**
 * Create a switch statement.
 *   @sw: Consumed. The switch.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(pt:st:pl3:sw sw, st:pl3:meta meta) pl3:stmt_sw = {
	return pl3:stmt_new(ev:pl3:stmt:sw, un:pl3:stmt{ .sw = sw }, meta);
};

/**
 * Create a case statement.
 *   @cas: Consumed. The case.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(pt:st:pl3:cas cas, st:pl3:meta meta) pl3:stmt_cas = {
	return pl3:stmt_new(ev:pl3:stmt:cas, un:pl3:stmt{ .cas = cas }, meta);
};

/**
 * Create a default statement.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(st:pl3:meta meta) pl3:stmt_dflt = {
	return pl3:stmt_new(ev:pl3:stmt:dflt, un:pl3:stmt{ }, meta);
};

/**
 * Create an error handler statement.
 *   @stmt: Consumed. The error handler statement.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(pt:st:pl3:stmt stmt, st:pl3:meta meta) pl3:stmt_onerr = {
	return pl3:stmt_new(ev:pl3:stmt:onerr, un:pl3:stmt{ .stmt = stmt }, meta);
};

/**
 * Create an error return statement.
 *   @expr: Consumed. The expression.
 *   @meta: Optional. Consumed. The metadata.
 *   &returns: The statement.
 */
def[export] pt:st:pl3:stmt(pt:st:pl3:expr expr, st:pl3:meta meta) pl3:stmt_eret = {
	return pl3:stmt_new(ev:pl3:stmt:eret, un:pl3:stmt{ .expr = expr }, meta);
};


/**
 * Attribute structure.
 *   @str: The string.
 *   @next, child: The next and child attributes.
 */
tydef[export] st:pl3:attr {
	pt:char str;
	pt:st:pl3:attr next, child;
};

/**
 * Create an attribute.
 *   @str: Consumed. The string.
 *   &returns: THe attribute.
 */
def[export] pt:st:pl3:attr(pt:char str) pl3:attr_new = {
	return mem:make(st:pl3:attr{ str, null, null });
};

/**
 * Delete an attribute.
 *   @attr: The attribute.
 */
def[export] void(pt:st:pl3:attr attr) pl3:attr_delete = {
	mem:free(attr->str);
	mem:free(attr);
};

/**
 * Clear an entire list of attributes.
 *   @attr: The attribute list.
 */
def[export] void(pt:st:pl3:attr attr) pl3:attr_clear = {
	var pt:st:pl3:attr cur;

	while(attr != null) {
		attr = (cur = attr)->next;
		pl3:attr_delete(cur);
	}
};

/**
 * Determine if an attribute list contains a value with the given identifier.
 *   @attr: The attribute list.
 *   @id: The identifier.
 */
def[export] bool(pt:st:pl3:attr attr, cpt:char id) pl3:attr_contains = {
	while(attr != null) {
		if(str:equal(attr->str, id))
			return true;

		attr = attr->next;
	}

	return false;
};


/**
 * Write an attribute.
 *   @attr: The attribute.
 *   @wr: The writer.
 */
def[export] e:str[void](pt:st:pl3:attr attr, pt:st:pl3:wr wr) pl3:attr_write = {
};


/**
 * Type declaration structure.
 *   @id: The identifier.
 *   @pub, expr: The public and export flags.
 *   @attr: The attributes.
 *   @tag: The declaration type tag.
 *   @data: The data.
 *   @meta: The metadata.
 */
tydef[export] en:pl3:tydecl { alias, struct, union, enum };
tydef[export] un:pl3:tydecl { pt:st:pl3:alias alias; pt:st:pl3:agg agg; pt:st:pl3:enum enum; };
tydef[export] st:pl3:tydecl {
	pt:char id;
	u32 flags;
	pt:st:pl3:attr attr;
	en:pl3:tydecl tag;
	un:pl3:tydecl data;
	st:pl3:meta meta;
};

/**
 * Create a type declaration.
 *   @id: Consumed. The identifier.
 *   @flags: The flags.
 *   @attr: Consumed. The attributes.
 *   @tag: The declaration type tag.
 *   @data: Consumed. The data.
 *   @meta: Consumed. The metadata.
 *   &returns: The type declaration.
 */
def[export] pt:st:pl3:tydecl(pt:char id, u32 flags, pt:st:pl3:attr attr, en:pl3:tydecl tag, un:pl3:tydecl data, st:pl3:meta meta) pl3:tydecl_new = {
	if(pl3:attr_contains(attr, "public"))
		flags |= pl3:decl:pub;

	if(pl3:attr_contains(attr, "export"))
		flags |= pl3:decl:exp | pl3:decl:pub;

	if(pl3:attr_contains(attr, "extern"))
		flags |= pl3:decl:ext;

	return mem:make(st:pl3:tydecl{ id, flags, attr, tag, data, meta });
};

/**
 * Delete a type declaration.
 *   @decl: The declaration.
 */
def[export] void(pt:st:pl3:tydecl decl) pl3:tydecl_delete = {
	switch(decl->tag) {
	case ev:pl3:tydecl:alias: pl3:alias_delete(decl->data.alias); break;
	case ev:pl3:tydecl:struct: pl3:agg_delete(decl->data.agg); break;
	case ev:pl3:tydecl:union: pl3:agg_delete(decl->data.agg); break;
	case ev:pl3:tydecl:enum: pl3:enum_delete(decl->data.enum); break;
	}

	pl3:attr_clear(decl->attr);
	pl3:meta_delete(decl->meta);
	mem:free(decl->id);
	mem:free(decl);
};


/**
 * Create an alias type declarations.
 *   @id: Consumed. The identifier.
 *   @flags: The flags.
 *   @attr: Consumed. The attributes.
 *   @alias: Consumed. The alias.
 *   @meta: Consumed. The metadata.
 *   &returns: The type declaration.
 */
def[export] pt:st:pl3:tydecl(pt:char id, u32 flags, pt:st:pl3:attr attr, pt:st:pl3:alias alias, st:pl3:meta meta) pl3:tydecl_alias = {
	return pl3:tydecl_new(id, flags, attr, ev:pl3:tydecl:alias, un:pl3:tydecl{ .alias = alias }, meta);
};

/**
 * Create a structure type declarations.
 *   @id: Consumed. The identifier.
 *   @flags: The flags.
 *   @attr: Consumed. The attributes.
 *   @agg: Consumed. The aggregate.
 *   @meta: Consumed. The metadata.
 *   &returns: The type declaration.
 */
def[export] pt:st:pl3:tydecl(pt:char id, u32 flags, pt:st:pl3:attr attr, pt:st:pl3:agg agg, st:pl3:meta meta) pl3:tydecl_struct = {
	return pl3:tydecl_new(id, flags, attr, ev:pl3:tydecl:struct, un:pl3:tydecl{ .agg = agg }, meta);
};

/**
 * Create a union type declarations.
 *   @id: Consumed. The identifier.
 *   @flags: The flags.
 *   @attr: Consumed. The attributes.
 *   @agg: Consumed. The aggregate.
 *   @meta: Consumed. The metadata.
 *   &returns: The type declaration.
 */
def[export] pt:st:pl3:tydecl(pt:char id, u32 flags, pt:st:pl3:attr attr, pt:st:pl3:agg agg, st:pl3:meta meta) pl3:tydecl_union = {
	return pl3:tydecl_new(id, flags, attr, ev:pl3:tydecl:union, un:pl3:tydecl{ .agg = agg }, meta);
};

/**
 * Create a enumerator type declarations.
 *   @id: Consumed. The identifier.
 *   @flags: The flags.
 *   @attr: Consumed. The attributes.
 *   @enum: Consumed. The enumerator.
 *   @meta: Consumed. The metadata.
 *   &returns: The type declaration.
 */
def[export] pt:st:pl3:tydecl(pt:char id, u32 flags, pt:st:pl3:attr attr, pt:st:pl3:enum enum, st:pl3:meta meta) pl3:tydecl_enum = {
	return pl3:tydecl_new(id, flags, attr, ev:pl3:tydecl:enum, un:pl3:tydecl{ .enum = enum }, meta);
};


/**
 * Block structure.
 *   @stmt: The statement list.
 */
tydef[export] st:pl3:block {
	pt:st:pl3:stmt stmt;
};

/**
 * Create a block.
 *   @stmt: Consumed. The statement list.
 *   &returns: The block.
 */
def[export] st:pl3:block(pt:st:pl3:stmt stmt) pl3:block_new = {
	return st:pl3:block{ stmt };
};

/**
 * Delete a block.
 *   @block: The block.
 */
def[export] void(st:pl3:block block) pl3:block_delete = {
	pl3:stmt_clear(block.stmt);
};


/**
 * Conditional structure.
 *   @eval: The evaluated expression.
 *   @ontrue, onfalse: The true and false statements.
 */
tydef[export] st:pl3:cond {
	pt:st:pl3:expr eval;
	pt:st:pl3:stmt ontrue, onfalse;
};

/**
 * Create a conditional.
 *   @eval: Consumed. The evaluated expression.
 *   @ontrue: Consumed. Optional. The true statement.
 *   @onfalse: Consumed. Optional. The false statement.
 */
def[export] pt:st:pl3:cond(pt:st:pl3:expr eval, pt:st:pl3:stmt ontrue, pt:st:pl3:stmt onfalse) pl3:cond_new = {
	return mem:make(st:pl3:cond{ eval, ontrue, onfalse });
};

/**
 * Delete a conditional.
 *   @cond: The conditional.
 */
def[export] void(pt:st:pl3:cond cond) pl3:cond_delete = {
	pl3:expr_delete(cond->eval);

	if(cond->ontrue != null)
		pl3:stmt_delete(cond->ontrue);

	if(cond->onfalse != null)
		pl3:stmt_delete(cond->onfalse);

	mem:free(cond);
};


/**
 * Loop structure.
 *   @init, eval, inc: The initial, evaluation, and increment expressions.
 *   @body: The body.
 *   @post: Run the body once before evaluating the conditional.
 */
tydef[export] st:pl3:loop {
	pt:st:pl3:expr init, eval, inc;
	pt:st:pl3:stmt body;
	bool post;
};

/**
 * Create a loop.
 *   @init: Optional. Consumed. The initial expression.
 *   @eval: Optional. Consumed. The evaluated expression.
 *   @inc: Optional. Consumed. The increment expression.
 *   @post: Flag indicating the evaluation is done after executing the body
 *     once.
 *   @body: Consumed. The body statement.
 */
def[export] pt:st:pl3:loop(pt:st:pl3:expr init, pt:st:pl3:expr eval, pt:st:pl3:expr inc, pt:st:pl3:stmt body, bool post) pl3:loop_new = {
	return mem:make(st:pl3:loop{ init, eval, inc, body, post });
};

/**
 * Delete a loop.
 *   @loop: The loop.
 */
def[export] void(pt:st:pl3:loop loop) pl3:loop_delete = {
	if(loop->init != null)
		pl3:expr_delete(loop->init);

	if(loop->eval != null)
		pl3:expr_delete(loop->eval);

	if(loop->inc != null)
		pl3:expr_delete(loop->inc);

	pl3:stmt_delete(loop->body);
	mem:free(loop);
};


/**
 * Switch structure.
 *   @eval: The evaluation expression.
 *   @stmt: The statement.
 *   @cas: The case list.
 *   @dflt: The default statement.
 */
tydef[export] st:pl3:sw {
	pt:st:pl3:expr eval;
	pt:st:pl3:stmt stmt;
	pt:st:pl3:cas cas;
	pt:st:pl3:stmt dflt;
};

/**
 * Case structure.
 *   @expr: The expression.
 *   @next: The next case.
 */
tydef[export] st:pl3:cas {
	pt:st:pl3:expr expr;

	pt:st:pl3:cas next;
};


/**
 * Create a switch.
 *   @eval: Consumed. The evaluation expression.
 *   @stmt: Consumed. The statement.
 *   &returns: The swtich.
 */
def[export] pt:st:pl3:sw(pt:st:pl3:expr eval, pt:st:pl3:stmt stmt) pl3:sw_new = {
	return mem:make(st:pl3:sw{ eval, stmt, null, null });
};

/**
 * Delete a switch.
 *   @sw: The switch.
 */
def[export] void(pt:st:pl3:sw sw) pl3:sw_delete = {
	pl3:expr_delete(sw->eval);
	pl3:stmt_delete(sw->stmt);
	mem:free(sw);
};


/**
 * Create a case.
 *   &returns: The case.
 */
def[export] pt:st:pl3:cas(pt:st:pl3:expr expr) pl3:cas_new = {
	return mem:make(st:pl3:cas{ expr, null });
};

/**
 * Delete a case.
 *   @cas: The case.
 */
def[export] void(pt:st:pl3:cas cas) pl3:cas_delete = {
	pl3:expr_delete(cas->expr);
	mem:free(cas);
};

/**
 * Bind structure.
 *   @redef: Redefined (i.e., skip).
 *   @id: The identifier.
 *   @expr: The expression.
 *   @meta: The metadata.
 *   @next: The next bind.
 */
tydef[export] st:pl3:bind {
	bool redef; //FIXME this shouldn't be needed
	pt:char id;
	pt:st:pl3:expr expr;
	st:pl3:meta meta;

	pt:st:pl3:bind next;
};

/**
 * Create a binding.
 *   @id: Consumed. The identifier.
 *   @expr: Optional. Consumed. The expression.
 *   @meta: Consumed. The metadata.
 *   &returns: The binding.
 */
def[export] pt:st:pl3:bind(pt:char id, pt:st:pl3:expr expr, st:pl3:meta meta) pl3:bind_new = {
	return mem:make(st:pl3:bind{ false, id, expr, meta, null });
};

/**
 * Delete a binding.
 *   @bind: The binding.
 */
def[export] void(pt:st:pl3:bind bind) pl3:bind_delete = {
	if(bind->expr != null)
		pl3:expr_delete(bind->expr);

	pl3:meta_delete(bind->meta);
	mem:free(bind->id);
	mem:free(bind);
};

/**
 * Delete all bindings in a list.
 *   @bind: The binding list.
 */
def[export] void(pt:st:pl3:bind bind) pl3:bind_clear = {
	var pt:st:pl3:bind tmp;

	while(bind != null) {
		bind = (tmp = bind)->next;
		pl3:bind_delete(tmp);
	}
};


/**
 * Read a binding.
 *   @rd: The reader.
 *   &returns: The binding.
 */
def[export] e:str[pt:st:pl3:bind](pt:st:pl3:rd rd) pl3:bind_read = {
	var pt:char id;
	var pt:st:pl3:expr expr;
	var st:pl3:meta meta;

	id = e:get(io:rd_str32(rd->file));
	onerr mem:free(id);

	if(e:get(io:rd_u8(rd->file)) != 0) {
		expr = e:get(pl3:expr_read(rd));
	}
	else
		expr = null;

	onerr pl3:expr_erase(expr);
	
	meta = e:get(pl3:meta_read(rd));
	onerr pl3:meta_delete(meta);

	return pl3:bind_new(id, expr, meta);
};

/**
 * Literal structure.
 *   @tag: The tag.
 *   @data: The value data.
 */
tydef[export] en:pl3:lit { none, "null", "bool", u8v, i8v, u16v, i16v, u32v, i32v, u64v, i64v, int, "fp32", "fp64", flt, ptr, str };
tydef[export] un:pl3:lit { bool boolv; u8 u8v; i8 i8v; u16 u16v; i16 i16v; u32 u32v; i32 i32v; u64 u64v; i64 i64v; fp32 fp32v; fp64 fp64v; fp64 flt; pt:st:m:int int; pt:st:pl3:buf buf; };
tydef[export] st:pl3:lit {
	en:pl3:lit tag;
	un:pl3:lit data;
};

/**
 * Create a literal.
 *   @tag: The tag.
 *   @data: The data.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(en:pl3:lit tag, un:pl3:lit data) pl3:lit_new = {
	return mem:make(st:pl3:lit{ tag, data });
};

/**
 * Delete a literal.
 *   @lit: The literal.
 */
def[export] void(pt:st:pl3:lit lit) pl3:lit_delete = {
	switch(lit->tag) {
	case ev:pl3:lit:none: break;
	case ev:pl3:lit:null: break;
	case ev:pl3:lit:int: m:int_unref(lit->data.int); break;
	case ev:pl3:lit:ptr: m:int_unref(lit->data.int); break;
	case ev:pl3:lit:str: pl3:buf_delete(lit->data.buf); break;
	}

	mem:free(lit);
};

/**
 * Create a none literal.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit() pl3:lit_none = {
	return pl3:lit_new(ev:pl3:lit:none, un:pl3:lit{});
};

/**
 * Create a null literal.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit() pl3:lit_null = {
	return pl3:lit_new(ev:pl3:lit:null, un:pl3:lit{});
};

/**
 * Create a boolean literal.
 *   @boolv: The initial value.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(bool boolv) pl3:lit_bool = {
	return pl3:lit_new(ev:pl3:lit:bool, un:pl3:lit{ .boolv = boolv });
};

/**
 * Create a signed 8-bit literal
 *   @u8v: The value.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(i8 i8v) pl3:lit_i8 = {
	return pl3:lit_new(ev:pl3:lit:i8v, un:pl3:lit{ .i8v = i8v });
};

/**
 * Create an unsigned 8-bit literal
 *   @u8v: The value.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(u8 u8v) pl3:lit_u8 = {
	return pl3:lit_new(ev:pl3:lit:u8v, un:pl3:lit{ .u8v = u8v });
};

/**
 * Create a signed 16-bit literal
 *   @u16v: The value.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(i16 i16v) pl3:lit_i16 = {
	return pl3:lit_new(ev:pl3:lit:i16v, un:pl3:lit{ .i16v = i16v });
};

/**
 * Create an unsigned 16-bit literal
 *   @u16v: The value.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(u16 u16v) pl3:lit_u16 = {
	return pl3:lit_new(ev:pl3:lit:u16v, un:pl3:lit{ .u16v = u16v });
};

/**
 * Create a signed 32-bit literal
 *   @i32v: The value.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(i32 i32v) pl3:lit_i32 = {
	return pl3:lit_new(ev:pl3:lit:i32v, un:pl3:lit{ .i32v = i32v });
};

/**
 * Create an unsigned 32-bit literal
 *   @u32v: The value.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(u32 u32v) pl3:lit_u32 = {
	return pl3:lit_new(ev:pl3:lit:u32v, un:pl3:lit{ .u32v = u32v });
};

/**
 * Create a signed 64-bit literal
 *   @i64v: The value.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(i64 i64v) pl3:lit_i64 = {
	return pl3:lit_new(ev:pl3:lit:i64v, un:pl3:lit{ .i64v = i64v });
};

/**
 * Create an unsigned 64-bit literal
 *   @u64v: The value.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(u64 u64v) pl3:lit_u64 = {
	return pl3:lit_new(ev:pl3:lit:u64v, un:pl3:lit{ .u64v = u64v });
};

/**
 * Create an 32-bit float.
 *   @val: The value.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(fp32 val) pl3:lit_fp32 = {
	return pl3:lit_new(ev:pl3:lit:fp32, un:pl3:lit{ .fp32v = val });
};

/**
 * Create an integer literal.
 *   @int: The integer value.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(pt:st:m:int int) pl3:lit_int = {
	return pl3:lit_new(ev:pl3:lit:int, un:pl3:lit{ .int = int });
};

/**
 * Create an float literal.
 *   @flt: The float value.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(fp64 flt) pl3:lit_flt = {
	return pl3:lit_new(ev:pl3:lit:flt, un:pl3:lit{ .flt = flt });
};

/**
 * Create a string literal.
 *   @buf: The string data buffer.
 *   &returns: The literal.
 */
def[export] pt:st:pl3:lit(pt:st:pl3:buf buf) pl3:lit_str = {
	return pl3:lit_new(ev:pl3:lit:str, un:pl3:lit{ .buf = buf });
};


/**
 * Clear the literal, setting it to none.
 *   @lit: The literal.
 */
def[export] void(pt:st:pl3:lit lit) pl3:lit_clear = {
	switch(lit->tag) {
	case ev:pl3:lit:none: break;
	case ev:pl3:lit:int: m:int_unref(lit->data.int); break;
	}

	lit->tag = ev:pl3:lit:none;
};


/**
 * Change a literal to a boolean.
 *   @lit: The literal.
 *   @boolv: The value.
 */
def[export] void(pt:st:pl3:lit lit, bool boolv) pl3:lit_put_bool = {
	pl3:lit_clear(lit);
	lit->tag = ev:pl3:lit:bool;
	lit->data.boolv = boolv;
};

/**
 * Change a literal to an unsigned 8-bit integer.
 *   @lit: The literal.
 *   @u8v: The value.
 */
def[export] void(pt:st:pl3:lit lit, u8 u8v) pl3:lit_put_u8 = {
	pl3:lit_clear(lit);
	lit->tag = ev:pl3:lit:u8v;
	lit->data.u8v = u8v;
};

/**
 * Change a literal to a signed 8-bit integer.
 *   @lit: The literal.
 *   @i8v: The value.
 */
def[export] void(pt:st:pl3:lit lit, i8 i8v) pl3:lit_put_i8 = {
	pl3:lit_clear(lit);
	lit->tag = ev:pl3:lit:i8v;
	lit->data.i8v = i8v;
};

/**
 * Change a literal to an unsigned 16-bit integer.
 *   @lit: The literal.
 *   @u16v: The value.
 */
def[export] void(pt:st:pl3:lit lit, u16 u16v) pl3:lit_put_u16 = {
	pl3:lit_clear(lit);
	lit->tag = ev:pl3:lit:u16v;
	lit->data.u16v = u16v;
};

/**
 * Change a literal to a signed 16-bit integer.
 *   @lit: The literal.
 *   @i16v: The value.
 */
def[export] void(pt:st:pl3:lit lit, i16 i16v) pl3:lit_put_i16 = {
	pl3:lit_clear(lit);
	lit->tag = ev:pl3:lit:i16v;
	lit->data.i16v = i16v;
};

/**
 * Change a literal to an unsigned 32-bit integer.
 *   @lit: The literal.
 *   @u32v: The value.
 */
def[export] void(pt:st:pl3:lit lit, u32 u32v) pl3:lit_put_u32 = {
	pl3:lit_clear(lit);
	lit->tag = ev:pl3:lit:u32v;
	lit->data.u32v = u32v;
};

/**
 * Change a literal to a signed 32-bit integer.
 *   @lit: The literal.
 *   @i32v: The value.
 */
def[export] void(pt:st:pl3:lit lit, i32 i32v) pl3:lit_put_i32 = {
	pl3:lit_clear(lit);
	lit->tag = ev:pl3:lit:i32v;
	lit->data.i32v = i32v;
};

/**
 * Change a literal to an unsigned 64-bit integer.
 *   @lit: The literal.
 *   @u64v: The value.
 */
def[export] void(pt:st:pl3:lit lit, u64 u64v) pl3:lit_put_u64 = {
	pl3:lit_clear(lit);
	lit->tag = ev:pl3:lit:u64v;
	lit->data.u64v = u64v;
};

/**
 * Change a literal to a signed 64-bit integer.
 *   @lit: The literal.
 *   @i64v: The value.
 */
def[export] void(pt:st:pl3:lit lit, i64 i64v) pl3:lit_put_i64 = {
	pl3:lit_clear(lit);
	lit->tag = ev:pl3:lit:i64v;
	lit->data.i64v = i64v;
};

/**
 * Change a literal to a 32-bit float.
 *   @lit: The literal.
 *   @val: The value.
 */
def[export] void(pt:st:pl3:lit lit, fp32 val) pl3:lit_put_fp32 = {
	pl3:lit_clear(lit);
	lit->tag = ev:pl3:lit:fp32;
	lit->data.fp32v = val;
};

/**
 * Change a literal to a 64-bit float.
 *   @lit: The literal.
 *   @val: The value.
 */
def[export] void(pt:st:pl3:lit lit, fp64 val) pl3:lit_put_fp64 = {
	pl3:lit_clear(lit);
	lit->tag = ev:pl3:lit:fp64;
	lit->data.fp64v = val;
};


/**
 * Fill a literal with a given type.
 *   @lit: The literal.
 *   @type: The type.
 *   &return: True if filled, false if an invalid fill.
 */
def[export] bool(pt:st:pl3:lit lit, st:pl3:type type) pl3:lit_fill = {
	// FIXME arbitrary width floats
	switch(lit->tag) {
	case ev:pl3:lit:int:
		switch(pl3:type_root(type).tag) {
		case ev:pl3:type:bool: pl3:lit_put_bool(lit, m:int_get_u8(lit->data.int) > 0); break;
		case ev:pl3:type:u8: pl3:lit_put_u8(lit, m:int_get_u8(lit->data.int)); break;
		case ev:pl3:type:i8: pl3:lit_put_i8(lit, m:int_get_i8(lit->data.int)); break;
		case ev:pl3:type:u16: pl3:lit_put_u16(lit, m:int_get_u16(lit->data.int)); break;
		case ev:pl3:type:i16: pl3:lit_put_i16(lit, m:int_get_i16(lit->data.int)); break;
		case ev:pl3:type:u32: pl3:lit_put_u32(lit, m:int_get_u32(lit->data.int)); break;
		case ev:pl3:type:i32: pl3:lit_put_i32(lit, m:int_get_i32(lit->data.int)); break;
		case ev:pl3:type:u64: pl3:lit_put_u64(lit, m:int_get_u64(lit->data.int)); break;
		case ev:pl3:type:i64: pl3:lit_put_i64(lit, m:int_get_i64(lit->data.int)); break;
		case ev:pl3:type:fp32: pl3:lit_put_fp32(lit, fp32{m:int_get_i64(lit->data.int)}); break;
		case ev:pl3:type:fp64: pl3:lit_put_fp64(lit, fp64{m:int_get_i64(lit->data.int)}); break;
		case ev:pl3:type:ptr: lit->tag = ev:pl3:lit:ptr; break;

		case ev:pl3:type:name:
			unreachable();

		case ev:pl3:type:arr:
		case ev:pl3:type:sig:
		case ev:pl3:type:err:
		case ev:pl3:type:args:
		case ev:pl3:type:annot:
			return false;

		default:
			unreachable();
		}

		break;

	case ev:pl3:lit:flt:
		switch(pl3:type_root(type).tag) {
		case ev:pl3:type:bool: pl3:lit_put_bool(lit, lit->data.flt != 0.0); break;
		case ev:pl3:type:u8: pl3:lit_put_u8(lit, u8{lit->data.flt}); break;
		case ev:pl3:type:i8: pl3:lit_put_i8(lit, i8{lit->data.flt}); break;
		case ev:pl3:type:u16: pl3:lit_put_u16(lit, u16{lit->data.flt}); break;
		case ev:pl3:type:i16: pl3:lit_put_i16(lit, i16{lit->data.flt}); break;
		case ev:pl3:type:u32: pl3:lit_put_u32(lit, u32{lit->data.flt}); break;
		case ev:pl3:type:i32: pl3:lit_put_i32(lit, i32{lit->data.flt}); break;
		case ev:pl3:type:u64: pl3:lit_put_u64(lit, u64{lit->data.flt}); break;
		case ev:pl3:type:i64: pl3:lit_put_i64(lit, i64{lit->data.flt}); break;
		case ev:pl3:type:fp32: pl3:lit_put_fp32(lit, fp32{lit->data.flt}); break;
		case ev:pl3:type:fp64: pl3:lit_put_fp64(lit, lit->data.flt); break;

		case ev:pl3:type:name:
			unreachable();

		case ev:pl3:type:arr:
		case ev:pl3:type:sig:
		case ev:pl3:type:err:
		case ev:pl3:type:args:
		case ev:pl3:type:annot:
			return false;

		default:
			unreachable();
		}

		break;

	default:
		fatal("FIXME lit fill2 %u", lit->tag);
	}

	return true;
};


/**
 * Retrieve the type for a literal.
 *   @lit: The literal.
 *   &returns: The type.
 */
def[export] st:pl3:type(pt:st:pl3:lit lit) pl3:lit_type = {
	switch(lit->tag) {
	case ev:pl3:lit:none: return pl3:type_unk;
	case ev:pl3:lit:null: return pl3:type_ptr(pl3:ptr_new(pl3:type_void, true));
	case ev:pl3:lit:bool: return pl3:type_bool;
	case ev:pl3:lit:u8v: return pl3:type_u8;
	case ev:pl3:lit:i8v: return pl3:type_i8;
	case ev:pl3:lit:u16v: return pl3:type_u16;
	case ev:pl3:lit:i16v: return pl3:type_i16;
	case ev:pl3:lit:u32v: return pl3:type_u32;
	case ev:pl3:lit:i32v: return pl3:type_i32;
	case ev:pl3:lit:u64v: return pl3:type_u64;
	case ev:pl3:lit:i64v: return pl3:type_i64;
	case ev:pl3:lit:int: return pl3:type_unk;
	case ev:pl3:lit:fp32: return pl3:type_fp32;
	case ev:pl3:lit:fp64: return pl3:type_fp64;
	case ev:pl3:lit:flt: return pl3:type_unk;
	case ev:pl3:lit:ptr: return pl3:type_ptr(pl3:ptr_new(pl3:type_void, true));
	case ev:pl3:lit:str: return pl3:type_ptr(pl3:ptr_new(pl3:type_u8, false));
	default: fatal("FIXME pl3:lit_type");
	}
};


/**
 * Read a literal.
 *   @rd: The reader.
 *   &returns: The literal.
 */
def[export] e:str[pt:st:pl3:lit](pt:st:pl3:rd rd) pl3:lit_read = {
	var en:pl3:lit tag;
	var un:pl3:lit data;

	tag = en:pl3:lit{e:get(io:rd_u8(rd->file))};

	switch(tag) {
	case ev:pl3:lit:none: break;
	case ev:pl3:lit:null: break;
	case ev:pl3:lit:bool: data.boolv = (e:get(io:rd_u8(rd->file)) > 0); break;
	case ev:pl3:lit:u8v: data.u8v = e:get(io:rd_u8(rd->file)); break;
	case ev:pl3:lit:i8v: data.i8v = e:get(io:rd_i8(rd->file)); break;
	case ev:pl3:lit:u16v: data.u16v = e:get(io:rd_u16(rd->file)); break;
	case ev:pl3:lit:i16v: data.i16v = e:get(io:rd_i16(rd->file)); break;
	case ev:pl3:lit:u32v: data.u32v = e:get(io:rd_u32(rd->file)); break;
	case ev:pl3:lit:i32v: data.i32v = e:get(io:rd_i32(rd->file)); break;
	case ev:pl3:lit:u64v: data.u64v = e:get(io:rd_u64(rd->file)); break;
	case ev:pl3:lit:i64v: data.i64v = e:get(io:rd_i64(rd->file)); break;
	case ev:pl3:lit:int:
	case ev:pl3:lit:fp32:
	case ev:pl3:lit:fp64:
	case ev:pl3:lit:flt:
	case ev:pl3:lit:ptr:
	case ev:pl3:lit:str: fatal("FIXME stub pl3:lit_write");
	}

	return pl3:lit_new(tag, data);
};

/**
 * Write a literal.
 *   @lit: The literal.
 *   @wr: The writer.
 */
def[export] e:str[void](pt:st:pl3:lit lit, pt:st:pl3:wr wr) pl3:lit_write = {
	e:get(io:wr_u8(wr->file, u8{lit->tag}));

	switch(lit->tag) {
	case ev:pl3:lit:none: break;
	case ev:pl3:lit:null: break;
	case ev:pl3:lit:bool: e:get(io:wr_u8(wr->file, lit->data.boolv ? 1 : 0)); break;
	case ev:pl3:lit:u8v: e:get(io:wr_u8(wr->file, lit->data.u8v)); break;
	case ev:pl3:lit:i8v: e:get(io:wr_i8(wr->file, lit->data.i8v)); break;
	case ev:pl3:lit:u16v: e:get(io:wr_u16(wr->file, lit->data.u16v)); break;
	case ev:pl3:lit:i16v: e:get(io:wr_i16(wr->file, lit->data.i16v)); break;
	case ev:pl3:lit:u32v: e:get(io:wr_u32(wr->file, lit->data.u32v)); break;
	case ev:pl3:lit:i32v: e:get(io:wr_i32(wr->file, lit->data.i32v)); break;
	case ev:pl3:lit:u64v: e:get(io:wr_u64(wr->file, lit->data.u64v)); break;
	case ev:pl3:lit:i64v: e:get(io:wr_i64(wr->file, lit->data.i64v)); break;
	case ev:pl3:lit:int:
	case ev:pl3:lit:fp32:
	case ev:pl3:lit:fp64:
	case ev:pl3:lit:flt:
	case ev:pl3:lit:ptr:
	case ev:pl3:lit:str: fatal("FIXME stub pl3:lit_write");
	}
};

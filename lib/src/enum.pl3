/**
 * Enumerator structure.
 *   @val: The value list.
 */
tydef[export] st:pl3:enum {
	pt:st:pl3:enval val;
};

/**
 * Create an enumerator.
 *   @val: Consumed. The enumerated value list.
 *   &returns: The enumerator.
 */
def[export] pt:st:pl3:enum(pt:st:pl3:enval val) pl3:enum_new = {
	return mem:make(st:pl3:enum{ val });
};

/**
 * Delete an enumerator.
 *   @enum: The enumerator.
 */
def[export] void(pt:st:pl3:enum enum) pl3:enum_delete = {
	pl3:enval_clear(enum->val);
	mem:free(enum);
};


/**
 * Find a value in an enumerator.
 *   @enum: The enumerator.
 *   @id: The value identifier (no prefix).
 *   &returns: The value if found, null otherwise.
 */
def[export] pt:st:pl3:enval(pt:st:pl3:enum enum, cpt:char id) pl3:enum_find = {
	var pt:st:pl3:enval val;

	for(val = enum->val; val != null; val = val->next) {
		if(str:equal(val->id, id))
			return val;
	}

	return null;
};


/**
 * Read an enumerator from a file.
 *   @rd: The reader.
 *   &returns: The enumerator.
 */
def[export] e:str[pt:st:pl3:enum](pt:st:pl3:rd rd) pl3:enum_read = {
	var pt:st:pl3:enval val = null;
	var pt:pt:st:pl3:enval ival = &val;

	onerr pl3:enval_clear(val);

	while(e:get(io:rd_u8(rd->file)) > 0) {
		*ival = e:get(pl3:enval_read(rd));
		ival = &(*ival)->next;
	}

	return pl3:enum_new(val);
};

/**
 * Write an enumerator to a file.
 *   @enum: The enumerator.
 *   @wr: The writer.
 */
def[export] e:str[void](pt:st:pl3:enum enum, pt:st:pl3:wr wr) pl3:enum_write = {
	var pt:st:pl3:enval val;

	for(val = enum->val; val != null; val = val->next) {
		e:get(io:wr_u8(wr->file, 1));
		e:get(pl3:enval_write(val, wr));
	}

	e:get(io:wr_u8(wr->file, 0));
};


/**
 * Enumerated value structure.
 *   @id: The identifier.
 *   @expr: The expression, if given.
 *   @meta: The metadata.
 *   @next: The next enumerated value.
 */
tydef[export] st:pl3:enval {
	pt:char id;
	pt:st:pl3:expr expr;
	st:pl3:meta meta;

	pt:st:pl3:enval next;
};

/**
 * Create an enumerator value. 
 *   @id: The identifier.
 *   @expr: Optional. Consumed. The expression.
 *   @meta: Consumed. The metadata.
 *   &returns: The enumerated value.
 */
def[export] pt:st:pl3:enval(pt:char id, pt:st:pl3:expr expr, st:pl3:meta meta) pl3:enval_new = {
	return mem:make(st:pl3:enval{ id, expr, meta, null });
};

/**
 * Delete an enumerated value.
 *   @val: The enumerated value.
 */
def[export] void(pt:st:pl3:enval val) pl3:enval_delete = {
	mem:free(val->id);
	pl3:expr_erase(val->expr);
	pl3:meta_delete(val->meta);
	mem:free(val);
};

/**
 * Clear a list of enumerated value.
 *   @val: The enumerated value list.
 */
def[export] void(pt:st:pl3:enval val) pl3:enval_clear = {
	var pt:st:pl3:enval tmp;
	
	while(val != null) {
		val = (tmp = val)->next;
		pl3:enval_delete(tmp);
	}
};


/**
 * Write an enumerated value to a file.
 *   @val: The enumerated value.
 *   @wr: The writer.
 */
def[export] e:str[void](pt:st:pl3:enval val, pt:st:pl3:wr wr) pl3:enval_write = {
	io:wr_str32(wr->file, val->id);

	io:wr_u8(wr->file, 0);
	if(val->expr != null) {
		//fatal("FIXME stub enval_write\n");
	}
	/* FIXME this
	if(val->expr != null) {
		io:wr_u8(wr->file, 1);
		fatal("FIXME stub enval_write\n");
	}
	else
		io:wr_u8(wr->file, 0);
	*/
	pl3:meta_write(val->meta, wr);
};

/**
 * Read a enumerated value from a file.
 *   @rd: The reader.
 *   &returns: The enumerated value.
 */
def[export] e:str[pt:st:pl3:enval](pt:st:pl3:rd rd) pl3:enval_read = {
	var pt:char id;
	var pt:st:pl3:expr expr;

	id = e:get(io:rd_str32(rd->file));
	onerr mem:free(id);

	if(e:get(io:rd_u8(rd->file)) > 0)
		fatal("FIXME stub enval_read\n");
	else
		expr = null;

	return pl3:enval_new(id, expr, e:get(pl3:meta_read(rd)));
};


/**
 * Enumerated reference structure.
 *   @id: The identifier.
 *   @val: The value.
 */
tydef[export] st:pl3:enref {
	pt:char id;
	pt:st:pl3:enval val;
};

/**
 * Create an enumerated reference. 
 *   @id: Consumed. The identifier.
 *   &returns: The enumerated value.
 */
def[export] pt:st:pl3:enref(pt:char id) pl3:enref_new = {
	return mem:make(st:pl3:enref{ id, null });
};

/**
 * Delete an enumerated reference.
 *   @ref: The enumerated reference.
 */
def[export] void(pt:st:pl3:enref ref) pl3:enref_delete = {
	mem:free(ref->id);
	mem:free(ref);
};

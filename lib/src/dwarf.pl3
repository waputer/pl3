def[export] u32 dwarf:tag:comp_unit  = 0x11,
                dwarf:tag:subprogram = 0x2e;

def[export] u32 dwarf:attr:sibling    = 0x01,
                dwarf:attr:location   = 0x02,
                dwarf:attr:name       = 0x03,
                dwarf:attr:ordering   = 0x09,
                dwarf:attr:byte_size  = 0x0B,
                dwarf:attr:stmt_list  = 0x10,
                dwarf:attr:low_pc     = 0x11,
                dwarf:attr:high_pc    = 0x12,
                dwarf:attr:lang       = 0x13,
                dwarf:attr:comp_dir   = 0x1B,
                dwarf:attr:producer   = 0x25,
                dwarf:attr:decl_col   = 0x39,
                dwarf:attr:decl_file  = 0x3A,
                dwarf:attr:decl_line  = 0x3B,
                dwarf:attr:encoding   = 0x3E,
                dwarf:attr:external   = 0x3F,
                dwarf:attr:frame_base = 0x40,
                dwarf:attr:type       = 0x49;

def[export] u32 dwarf:form:addr    = 0x01,
                dwarf:form:block2  = 0x02,
                dwarf:form:data2   = 0x05,
                dwarf:form:data4   = 0x06,
                dwarf:form:data8   = 0x07,
                dwarf:form:string  = 0x08,
                dwarf:form:data1   = 0x0b,
                dwarf:form:strp    = 0x0e,
                dwarf:form:ref1    = 0x11,
                dwarf:form:ref2    = 0x12,
                dwarf:form:ref4    = 0x13,
                dwarf:form:ref8    = 0x14,
                dwarf:form:sec_off = 0x17,
                dwarf:form:exprloc = 0x18,
                dwarf:form:flag    = 0x19;


tydef[export] st:dwarf:head {
	u32 len;
	u16 ver;
	u32 abbr;
	u8 ptr;
};

tydef[export] un:dwarf:data {
	u8 uint8;
	u16 uint16;
	u32 uint32;
	u64 uint64;
	i8 int8;
	i16 int16;
	i32 int32;
	i64 int64;
	pt:void buf;
	cpt:char str;
};

tydef[export] ty:dwarf:call = void(u32 tag, u32 attr, u32 form, un:dwarf:data data, pt:void arg);

/**
 * Retrieve the string corresponding to a tag.
 *   @tag: The tag.
 *   &returns: The string.
 */
def[export] cpt:char(u32 tag) dwarf:tag_str = {
	switch(tag) {
	case dwarf:tag:comp_unit: return "comp_unit";
	default: return "unk";
	}
};

/**
 * Retrieve the string corresponding to an attribute.
 *   @attr: The attribute.
 *   &returns: The string.
 */
def[export] cpt:char(u32 attr) dwarf:attr_str = {
	switch(attr) {
	case dwarf:attr:sibling: return "sibling";
	case dwarf:attr:location: return "location";
	case dwarf:attr:name: return "name";
	case dwarf:attr:ordering: return "ordering";
	case dwarf:attr:byte_size: return "byte_size";
	case dwarf:attr:stmt_list: return "stmt_list";
	case dwarf:attr:low_pc: return "low_pc";
	case dwarf:attr:high_pc: return "high_pc";
	case dwarf:attr:lang: return "lang";
	case dwarf:attr:comp_dir: return "comp_dir";
	case dwarf:attr:producer: return "producer";
	case dwarf:attr:decl_col: return "decl_col";
	case dwarf:attr:decl_file: return "decl_file";
	case dwarf:attr:decl_line: return "decl_line";
	case dwarf:attr:encoding: return "encoding";
	case dwarf:attr:external: return "external";
	case dwarf:attr:frame_base: return "frame_base";
	case dwarf:attr:type: return "type";
	default: return "unk";
	}
};

def[export] cpt:char(u32 val) dwarf:form_str = {
	switch(val) {
	case dwarf:form:addr: return "addr";
	case dwarf:form:block2: return "block2";
	case dwarf:form:data2: return "data2";
	case dwarf:form:data4: return "data4";
	case dwarf:form:data8: return "data8";
	case dwarf:form:string: return "string";
	case dwarf:form:data1: return "data1";
	case dwarf:form:strp: return "strp";
	case dwarf:form:ref1: return "ref1";
	case dwarf:form:ref2: return "ref2";
	case dwarf:form:ref4: return "ref4";
	case dwarf:form:ref8: return "ref8";
	case dwarf:form:sec_off: return "sec_off";
	case dwarf:form:exprloc: return "exprloc";
	case dwarf:form:flag: return "flag";
	default: return "unk";
	}
};

tydef[export] st:dwarf:hdr {
	u32 len;
	u16 ver;
	u32 off;
	u8 sz;
};


tydef st:abbr {
	u64 id, tag, off;
	st:avl:node node;
};


/**
 * Create a map of all the attributes.
 *   @file: The file.
 *   @pos: The positional offset.
 *   &returns: The map root.
 */
def e:str[st:avl:root](st:io:file file) dwarf:attr_map = {
	var st:avl:root map;
	var u64 id, tag, attr, val;

	map = avl:root_new(&avl:cmp_u64);
	onerr avl:root_delete(&map, offsetof(st:abbr, node), &mem:free);

	while(true) {
		id = e:get(io:rd_uleb128(file));
		if(id == 0)
			break;

		var pt:st:abbr inst;

		tag = e:get(io:rd_uleb128(file));
		e:get(io:rd_u8(file));

		inst = mem:make(st:abbr{ id, tag, e:get(io:tell(file)) });
		inst->node = avl:node(&inst->id);
		if(avl:root_get(&map, &inst->id) == null)
			avl:root_add(&map, &inst->node);
		else
			mem:free(inst);

		do {
			attr = e:get(io:rd_uleb128(file));
			val = e:get(io:rd_uleb128(file));
		} while(attr != 0);
	}

	return map;
};

def e:str[void](st:io:file info, st:io:file abbr, st:io:file str, u32 off, u32 size, pt:ty:dwarf:call call, pt:void arg) dwarf:v4 = {
	var u32 tag, attr, val;
	var u64 n, end;
	var st:avl:root map;
	var pt:st:avl:node node;

	end = e:get(io:tell(info)) + u64{size};

	io:seek_set(abbr, i64{off});

	map = e:get(dwarf:attr_map(abbr));
	onerr avl:root_delete(&map, offsetof(st:abbr, node), &mem:free);

	while(e:get(io:tell(info)) < end) {
		n = e:get(io:rd_uleb128(info));
		if(n == 0)
			continue;

		node = avl:root_get(&map, &n);
		if(node == null)
			e:fmt("Invalid abbreviation ID.");

		tag = u32{getparent(node, st:abbr, node)->tag};
		call->(tag, 0, 0, un:dwarf:data{}, arg);
		e:get(io:seek_set(abbr, i64{getparent(node, st:abbr, node)->off}));

		do {
			attr = u32{e:get(io:rd_uleb128(abbr))};
			val = u32{e:get(io:rd_uleb128(abbr))};

			switch(val) {
			case 0: break;
			case dwarf:form:addr: call->(tag, attr, val, un:dwarf:data{ .uint64 = e:get(io:rd_u64(info)) }, arg); break;
			case dwarf:form:data1: call->(tag, attr, val, un:dwarf:data{ .uint8 = e:get(io:rd_u8(info)) }, arg); break;
			case dwarf:form:data2: call->(tag, attr, val, un:dwarf:data{ .uint16 = e:get(io:rd_u16(info)) }, arg); break;
			case dwarf:form:data4: call->(tag, attr, val, un:dwarf:data{ .uint32 = e:get(io:rd_u32(info)) }, arg); break;
			case dwarf:form:data8: call->(tag, attr, val, un:dwarf:data{ .uint64 = e:get(io:rd_u64(info)) }, arg); break;
			case dwarf:form:string: {
				var char ch;
				var pt:char str;
				var st:str:buf buf;
				
				buf = str:buf_new(16);

				do {
					ch = e:get(io:rd_u8(info));
					str:buf_add_ch(&buf, ch);
				} while(ch != '\0');

				str = str:buf_done(&buf);
				call->(tag, attr, val, un:dwarf:data{ .str = str}, arg);
				mem:free(str);
			} break;
			case dwarf:form:strp: {
				var u32 n = u32{e:get(io:rd_u32(info))};
				var ar[256]:char arr;

				e:get(io:seek_set(str, i64{n}));
				e:get(io:read(str, &arr, 256));
				call->(tag, attr, val, un:dwarf:data{ .str = *arr }, arg);
			} break;
			case dwarf:form:ref1: call->(tag, attr, val, un:dwarf:data{ .uint8 = e:get(io:rd_u8(info)) }, arg); break;
			case dwarf:form:ref2: call->(tag, attr, val, un:dwarf:data{ .uint16 = e:get(io:rd_u16(info)) }, arg); break;
			case dwarf:form:ref4: call->(tag, attr, val, un:dwarf:data{ .uint32 = e:get(io:rd_u32(info)) }, arg); break;
			case dwarf:form:ref8: call->(tag, attr, val, un:dwarf:data{ .uint64 = e:get(io:rd_u64(info)) }, arg); break;
			case dwarf:form:sec_off: call->(tag, attr, val, un:dwarf:data{ .uint32 = e:get(io:rd_u32(info)) }, arg); break;
			case dwarf:form:exprloc: {
				var pt:void buf;
				var u64 len;

				len = e:get(io:rd_uleb128(info));
				buf = mem:alloc(u32{len});
				io:rd_buf(info, buf, u32{len});
				call->(tag, attr, val, un:dwarf:data{ .buf = buf }, arg);
				mem:free(buf);
			} break;
			case dwarf:form:flag: break;
			default: fatal("Unknown value: %x\n", u32{val});
			}
		} while(attr != 0);
	}

	avl:root_delete(&map, offsetof(st:abbr, node), &mem:free);
};


def e:str[void](cpt:char path, pt:ty:dwarf:call call, pt:void arg) dwarf:parse_file = {
	var u16 i;
	var st:str:buf str;
	var st:io:file file;
	var st:elf64:hdr hdr;
	var st:elf64:sect sect, str_sect, abbr_sect, info_sect, dstr_sect;
	var st:io:file info, abbr, dstr;

	file = e:get(io:open(path, io:mode:read));
	onerr io:close(file);

	str = str:buf_new(256);

	e:get(elf64:rd_hdr(file, &hdr));
	e:get(elf64:rd_sect(file, &hdr, hdr.str_idx, &str_sect));
	abbr_sect.off = info_sect.off = dstr_sect.off = 0;

	for(i = 0; i < hdr.sect_cnt; i++) {
		e:get(elf64:rd_sect(file, &hdr, i, &sect));
		e:get(elf64:rd_str(file, &str_sect, sect.name, &str));

		if(str:equal(str.arr, ".debug_abbrev"))
			abbr_sect = sect;
		else if(str:equal(str.arr, ".debug_info"))
			info_sect = sect;
		else if(str:equal(str.arr, ".debug_str"))
			dstr_sect = sect;
	}

	if((abbr_sect.off == 0) || (info_sect.off == 0) || (dstr_sect.off == 0))
		e:fmt("Missing debugging information.");

	info = io:view(file, info_sect.off, info_sect.sz);
	onerr io:close(info);

	abbr = io:view(file, abbr_sect.off, abbr_sect.sz);
	onerr io:close(abbr);

	dstr = io:view(file, dstr_sect.off, dstr_sect.sz);
	onerr io:close(dstr);

	while(e:get(io:tell(info)) < info_sect.sz) {
		var st:dwarf:head head;

		e:get(io:rd_buf(info, &head, sizeof(head)));

		if(head.ver == 4)
			dwarf:v4(info, abbr, dstr, head.abbr, head.len - sizeof(st:dwarf:head) + 4, call, arg);
		else
			fatal("TODO");
	}

	io:close(info);
	io:close(abbr);
	io:close(dstr);
	io:close(file);
	str:buf_delete(str);
};

def e:str[void](cpt:char path, st:io:file file) dwarf:dump_file = {
	def void(u32 tag, u32 attr, u32 form, un:dwarf:data data, pt:void arg) func = {
		var st:io:file file = *pt:st:io:file{arg};

		if(attr == 0) {
			io:fmt(file, "%s(%x)\n", dwarf:tag_str(u32{tag}), u32{tag});
		}
		else {
			io:fmt(file, "  %s(%x):%s(%x): ", dwarf:attr_str(attr), attr, dwarf:form_str(form), form);

			switch(u32{form}) {
			case dwarf:form:addr: io:fmt(file, "%x\n", u32{data.uint64}); break;
			case dwarf:form:data4: io:fmt(file, "%x\n", u32{data.uint32}); break;
			case dwarf:form:strp: io:fmt(file, "\"%s\"\n", data.str); break;
			default: io:fmt(file, "??\n"); break;
			}
		}
	};

	e:get(dwarf:parse_file(path, &func, &file));
};

tydef st:info {
	u64 addr, lo, hi;
	u32 tag;
	pt:char func, ret;
};
def[export] e:str[pt:char](cpt:char path, pt:void addr) dwarf:getfunc = {
	def void(u32 tag, u32 attr, u32 form, un:dwarf:data data, pt:void arg) func = {
		var pt:st:info info = arg;

		switch(u32{attr}) {
		case 0:
			if((info->lo <= info->addr) && (info->addr <= info->hi) && (info->func != null) && (info->tag == dwarf:tag:subprogram)) {
				mem:erase(info->ret);
				info->ret = info->func;
				info->func = null;
			}

			info->tag = tag;
			mem:erase(info->func);
			info->func = null;
			break;

		case dwarf:attr:low_pc:
			if(form == dwarf:form:addr)
				info->lo = data.uint64;

			break;

		case dwarf:attr:high_pc:
			if(form == dwarf:form:data4)
				info->hi = info->lo + u64{data.uint32};

			break;

		case dwarf:attr:name:
			if(form == dwarf:form:strp) {
				info->func = str:dup(data.str);
				//print("%x %x %x %s\n", info->lo, info->addr, info->hi, info->func);
			}

			break;
		}
	};

	var st:info info = { u64{addr-1}/*FIXME is this okay?, calls move the pc early*/, 0, 0, 0, null, null };

	onerr mem:erase(info.func);
	onerr mem:erase(info.ret);

	e:get(dwarf:parse_file(path, &func, &info));

	mem:erase(info.func);

	return info.ret;
};

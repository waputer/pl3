def[export] u32 elf64:magic = 0x464C457F;


/**
 * 64-bit ELF header structure.
 */
tydef[export] st:elf64:hdr {
	u32 magic;
	u8 width;
	u8 endian;
	u8 ver;
	u8 abi;
	ar[8]:u8 unused;
	u16 type;
	u16 instr;
	u32 elfver;
	u64 entry;
	u64 prog_off;
	u64 sect_off;
	u32 flags;
	u16 size;
	u16 prog_size;
	u16 prog_cnt;
	u16 sectsz;
	u16 sect_cnt;
	u16 stridx;
};

/**
 * 64-bit ELF section structure.
 */
tydef[export] st:elf64:sect {
	u32 str;
	u32 type;
	u64 flags;
	u64 addr;
	u64 off;
	u64 size;
	u32 link;
	u32 info;
	u64 align;
	u64 entsize;
};


/**
 * Read a ELF header from a file. The file is verified to make sure the magic
 * number matches.
 *   @file: The file.
 *   @hdr: Out. The header buffer.
 */
def[export] e:str[void](st:io:file file, pt:st:elf64:hdr hdr) elf64:rd_hdr = {
	e:get(io:rd_buf(file, hdr, sizeof(st:elf64:hdr)));

	if(hdr->magic != elf64:magic)
		e:fmt("Invalid magic number.");
};

/**
 * Read a section header from the file.
 *   @file: The file.
 *   @hdr: The ELF header.
 *   @idx: The index.
 *   @sect: Out. The section header.
 */
def[export] e:str[void](st:io:file file, pt:st:elf64:hdr hdr, u16 idx, pt:st:elf64:sect sect) elf64:rd_sect = {
	e:get(io:seek_set(file, i64{hdr->sect_off} + i64{idx * hdr->sectsz}));
	e:get(io:rd_buf(file, sect, sizeof(st:elf64:sect)));
};

def[export] e:str[void](st:io:file file, pt:st:elf64:sect sect, u32 off, pt:st:str:buf str) elf64:rd_str = {
	var u64 i;
	var i16 byte;

	str:buf_reset(str);
	e:get(io:seek(file, io:seek:set, i64{sect->off} + i64{off}));

	for(i = u64{off}; i < sect->size; i++) {
		byte = e:get(io:rd_byte(file));
		if(byte <= 0)
			break;

		str:buf_add_ch(str, char{byte});
	}

	str:buf_done(str);
};

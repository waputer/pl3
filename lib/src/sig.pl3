/**
 * Function signature structure.
 *   @ret: The return type.
 *   @param: The parameter list.
 *   @vlist: The variable argument list flag.
 */
tydef[export] st:pl3:sig {
	st:pl3:type ret;
	pt:st:pl3:param param;
	bool vlist;
};

/**
 * Argument structure.
 *   @type: The type.
 *   @id: The identifier.
 *   @next: The next parameter.
 */
tydef[export] st:pl3:param {
	st:pl3:type type;
	pt:char id;

	pt:st:pl3:param next;
};

/**
 * Create a function signature.
 *   @ret: Consumed. The return type.
 *   @param: Consumed. The parameter list.
 *   @vlist: Variable arugment list flag.
 *   &returns: The signature.
 */
def[export] pt:st:pl3:sig(st:pl3:type ret, pt:st:pl3:param param, bool vlist) pl3:sig_new = {
	return mem:make(st:pl3:sig{ ret, param, vlist });
};

/**
 * Copy a function signature.
 *   @sig: The function signature.
 *   &returns: The copy.
 */
def[export] pt:st:pl3:sig(cpt:st:pl3:sig sig) pl3:sig_copy = {
	return pl3:sig_new(pl3:type_copy(sig->ret), pl3:param_clone(sig->param), sig->vlist);
};

/**
 * Delete a function signature.
 *   @sig: The function signature.
 */
def[export] void(pt:st:pl3:sig sig) pl3:sig_delete = {
	pl3:type_delete(sig->ret);
	pl3:param_clear(sig->param);
	mem:free(sig);
};


/**
 * Read a function signature.
 *   @rd: The reader.
 *   &returns: The function signature.
 */
def[export] e:str[pt:st:pl3:sig](pt:st:pl3:rd rd) pl3:sig_read = {
	var st:pl3:type type;
	var bool vlist;
	var pt:st:pl3:param param = null;
	var pt:pt:st:pl3:param iparam = &param;

	onerr pl3:param_clear(param);

	type = e:get(pl3:type_read(rd));
	onerr pl3:type_delete(type);

	vlist = bool{e:get(io:rd_u8(rd->file))};

	while(bool{e:get(io:rd_u8(rd->file))}) {
		*iparam = e:get(pl3:param_read(rd));
		iparam = &(*iparam)->next;
	}

	return pl3:sig_new(type, param, vlist);
};


/**
 * Create a parameter.
 *   @type: Consumed. The type.
 *   @id: Optional. Consumed. The identifier.
 *   &returns: The parameter.
 */
def[export] pt:st:pl3:param(st:pl3:type type, pt:char id) pl3:param_new = {
	return mem:make(st:pl3:param{ type, id, null });
};

/**
 * Copy a parameter.
 *   @param: The parameter.
 *   &returns: The copy.
 */
def[export] pt:st:pl3:param(cpt:st:pl3:param param) pl3:param_copy = {
	return pl3:param_new(pl3:type_copy(param->type), (param->id != null) ? str:dup(param->id) : null);
};

/**
 * Copy a parameter list.
 *   @param: The parameter list.
 *   &returns; The copy.
 */
def[export] pt:st:pl3:param(cpt:st:pl3:param param) pl3:param_clone = {
	var pt:st:pl3:param ret;
	var pt:pt:st:pl3:param iret = &ret;

	while(param != null) {
		*iret = pl3:param_copy(param);
		iret = &(*iret)->next;
		param = param->next;
	}

	*iret = null;

	return ret;
};

/**
 * Delete a parameter.
 *   @param: The parameter.
 */
def[export] void(pt:st:pl3:param param) pl3:param_delete = {
	pl3:type_delete(param->type);
	mem:erase(param->id);
	mem:free(param);
};

/**
 * Clear a list of parameters.
 *   @param; The parameter list.
 */
def[export] void(pt:st:pl3:param param) pl3:param_clear = {
	var pt:st:pl3:param tmp;
	     
	while(param != null) {
		param = (tmp = param)->next;
		pl3:param_delete(tmp);
	}
};



/**
 * Read a parameter.
 *   @rd: The reader.
 *   &returns: The parameter.
 */
def[export] e:str[pt:st:pl3:param](pt:st:pl3:rd rd) pl3:param_read = {
	var st:pl3:type type;
	var pt:char id;

	type = e:get(pl3:type_read(rd));
	onerr pl3:type_delete(type);

	if(e:get(io:rd_u8(rd->file)) > 0)
		id = e:get(io:rd_str32(rd->file));
	else
		id = null;

	return pl3:param_new(type, id);
};

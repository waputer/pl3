
/**
 * Read an entire buffer to an I/O.
 *   @io: The I/O.
 *   @buf: The buffer.
 *   @sz: The size.
 */
def[export] e:str[void](i32 desc, pt:void buf, u32 sz) io:rd_buf = {
	var u32 rd;

	while(sz > 0) {
		rd = e:get(io:read(desc, buf, sz));
		if(rd == 0)
			e:fmt("Read failed.");

		buf += rd;
		sz -= rd;
	}
};
def[export] e:str[void](st:io io, pt:void buf, u32 sz) io1:rd_buf = {
	var u32 rd;

	while(sz > 0) {
		rd = e:get(io1:read(io, buf, sz));
		if(rd == 0)
			e:fmt("Read failed.");

		buf += rd;
		sz -= rd;
	}
};

/**
 * Read a byte from an I/O descriptor.
 *   @desc: The I/O descriptor.
 *   &returns: The byte or -1 if at end-of-stream.
 */
def[export] e:str[i16](i32 io) io:rd_byte = {
	var u8 byte;
	var u32 rd;

	rd = e:get(io:read(io, &byte, 1));
	return (rd == 0) ? -1 : i16{byte};
};
def[export] e:str[i16](st:io io) io1:rd_byte = {
	var u8 byte;
	var u32 rd;

	rd = e:get(io1:read(io, &byte, 1));
	return (rd == 0) ? -1 : i16{byte};
};

/**
 * Read a byte to verify at end-of-stream.
 *   @desc: The I/O descriptor.
 */
def[export] e:str[void](i32 desc) io:rd_eos = {
	if(e:get(io:rd_byte(desc)) >= 0)
		e:fmt("Unexpected data at end-of-stream.");
};
def[export] e:str[void](st:io io) io1:rd_eos = {
	if(e:get(io1:rd_byte(io)) >= 0)
		e:fmt("Unexpected data at end-of-stream.");
};

/**
 * Read an entire character from an I/O.
 *   @io: The I/O.
 *   &returns: The character.
 */
def[export] e:str[char](st:io io) io1:rd_ch = {
	var char val;

	e:get(io1:rd_buf(io, &val, sizeof(val)));

	return val;
};

/**
 * Read an entire boolean from an I/O.
 *   @io: The I/O.
 *   &returns: The value.
 */
def[export] e:str[bool](st:io io) io1:rd_bool = {
	var u8 val;

	e:get(io1:rd_buf(io, &val, sizeof(val)));

	return val != 0;
};

/**
 * Read an entire unsigned, 8-bit from an I/O.
 *   @desc: The I/O descriptor.
 *   &returns: The value.
 */
def[export] e:str[u8](i32 desc) io:rd_u8 = {
	var u8 val;

	e:get(io:rd_buf(desc, &val, sizeof(val)));

	return val;
};
def[export] e:str[u8](st:io io) io1:rd_u8 = {
	var u8 val;

	e:get(io1:rd_buf(io, &val, sizeof(val)));

	return val;
};

/**
 * Read an entire signed, 8-bit from an I/O.
 *   @desc: The I/O descriptor.
 *   &returns: The value.
 */
def[export] e:str[i8](i32 desc) io:rd_i8 = {
	var i8 val;

	e:get(io:rd_buf(desc, &val, sizeof(val)));

	return val;
};
def[export] e:str[i8](st:io io) io1:rd_i8 = {
	var i8 val;

	e:get(io1:rd_buf(io, &val, sizeof(val)));

	return val;
};

/**
 * Read an entire unsigned, 16-bit from an I/O.
 *   @desc: The I/O descriptor.
 *   &returns: The value.
 */
def[export] e:str[u16](i32 desc) io:rd_u16 = {
	var u16 val;

	e:get(io:rd_buf(desc, &val, sizeof(val)));

	return val;
};
def[export] e:str[u16](st:io io) io1:rd_u16 = {
	var u16 val;

	e:get(io1:rd_buf(io, &val, sizeof(val)));

	return val;
};

/**
 * Read an entire signed, 16-bit from an I/O.
 *   @desc: The I/O descriptor.
 *   &returns: The value.
 */
def[export] e:str[i16](i32 desc) io:rd_i16 = {
	var i16 val;

	e:get(io:rd_buf(desc, &val, sizeof(val)));

	return val;
};
def[export] e:str[i16](st:io io) io1:rd_i16 = {
	var i16 val;

	e:get(io1:rd_buf(io, &val, sizeof(val)));

	return val;
};

/**
 * Read an entire unsigned, 32-bit from an I/O descriptor.
 *   @desc: The I/O descriptor.
 *   &returns: The value.
 */
def[export] e:str[u32](i32 desc) io:rd_u32 = {
	var u32 val;

	e:get(io:rd_buf(desc, &val, sizeof(val)));

	return val;
};
def[export] e:str[u32](st:io io) io1:rd_u32 = {
	var u32 val;

	e:get(io1:rd_buf(io, &val, sizeof(val)));

	return val;
};

/**
 * Read an entire signed, 32-bit from an I/O.
 *   @io: The I/O descriptor.
 *   &returns: The value.
 */
def[export] e:str[i32](i32 desc) io:rd_i32 = {
	var i32 val;

	e:get(io:rd_buf(desc, &val, sizeof(val)));

	return val;
};
def[export] e:str[i32](st:io io) io1:rd_i32 = {
	var i32 val;

	e:get(io1:rd_buf(io, &val, sizeof(val)));

	return val;
};

/**
 * Read an entire unsigned, 64-bit from an I/O.
 *   @desc: The I/O descriptor.
 *   &returns: The value.
 */
def[export] e:str[u64](i32 desc) io:rd_u64 = {
	var u64 val;

	e:get(io:rd_buf(desc, &val, sizeof(val)));

	return val;
};
def[export] e:str[u64](st:io io) io1:rd_u64 = {
	var u64 val;

	e:get(io1:rd_buf(io, &val, sizeof(val)));

	return val;
};

/**
 * Read an entire signed, 64-bit from an I/O.
 *   @desc: The I/O descriptor.
 *   &returns: The value.
 */
def[export] e:str[i64](i32 desc) io:rd_i64 = {
	var i64 val;

	e:get(io:rd_buf(desc, &val, sizeof(val)));

	return val;
};
def[export] e:str[i64](st:io io) io1:rd_i64 = {
	var i64 val;

	e:get(io1:rd_buf(io, &val, sizeof(val)));

	return val;
};

/**
 * Read an entire 32-bit float from an I/O.
 *   @io: The I/O.
 *   &returns: The value.
 */
def[export] e:str[fp32](st:io io) io1:rd_fp32 = {
	var fp32 val;

	e:get(io1:rd_buf(io, &val, sizeof(val)));

	return val;
};

/**
 * Read an entire 64-bit float from an I/O.
 *   @io: The I/O.
 *   &returns: The value.
 */
def[export] e:str[fp64](st:io io) io1:rd_fp64 = {
	var fp64 val;

	e:get(io1:rd_buf(io, &val, sizeof(val)));

	return val;
};

/**
 * Read a string with a 32-bit lengths prefix.
 *   @io: The I/O.
 *   &returns: The allocated string.
 */
def[export] e:str[pt:char](st:io io) io1:rd_str32 = {
	var u32 len;
	var pt:char str;

	len = e:get(io1:rd_u32(io));
	str = mem:alloc(len + 1);
	onerr mem:free(str);

	e:get(io1:rd_buf(io, str, len));
	str[len] = '\0';

	return str;
};


/**
 * Write an entire buffer to an I/O.
 *   @desc: The descriptor.
 *   @buf: The buffer.
 *   @sz: The size.
 */
def[export] e:str[void](i32 desc, cpt:void buf, u32 sz) io:wr_buf = {
	var u32 wr;

	while(sz > 0) {
		wr = e:get(io:write(desc, buf, sz));
		if(wr == 0)
			e:fmt("Write failed.");

		buf += wr;
		sz -= wr;
	}
};
def[export] e:str[void](st:io io, cpt:void buf, u32 sz) io1:wr_buf = {
	var u32 wr;

	while(sz > 0) {
		wr = e:get(io1:write(io, buf, sz));
		if(wr == 0)
			e:fmt("Write failed.");

		buf += wr;
		sz -= wr;
	}
};

/**
 * Write a character to an I/O.
 *   @desc: The descriptor.
 *   @ch: The character.
 */
def[export] e:str[void](i32 desc, char ch) io:wr_ch = {
	e:get(io:wr_buf(desc, &ch, 1));
};
def[export] e:str[void](st:io io, char ch) io1:wr_ch = {
	e:get(io1:wr_buf(io, &ch, 1));
};

/**
 * Write a boolean to an I/O.
 *   @io: The I/O.
 *   @ch: The character.
 */
def[export] e:str[void](st:io io, bool val) io1:wr_bool = {
	var u8 t = (val ? 1 : 0);

	e:get(io1:wr_buf(io, &t, 1));
};

/**
 * Write an unsigned, 8-bit integer to an I/O descriptor.
 *   @desc: The I/O descriptor.
 *   @val: The value.
 */
def[export] e:str[void](i32 desc, u8 val) io:wr_u8 = {
	e:get(io:wr_buf(desc, &val, sizeof(val)));
};
def[export] e:str[void](st:io io, u8 val) io1:wr_u8 = {
	e:get(io1:wr_buf(io, &val, sizeof(val)));
};

/**
 * Write a signed, 64-bit integer to an I/O.
 *   @desc: The I/O descriptor.
 *   @val: The value.
 */
def[export] e:str[void](i32 desc, i8 val) io:wr_i8 = {
	e:get(io:wr_buf(desc, &val, sizeof(val)));
};
def[export] e:str[void](st:io io, i8 val) io1:wr_i8 = {
	e:get(io1:wr_buf(io, &val, sizeof(val)));
};

/**
 * Write an unsigned, 16-bit integer to an I/O.
 *   @desc: The I/O descriptor.
 *   @val: The value.
 */
def[export] e:str[void](i32 desc, u16 val) io:wr_u16 = {
	e:get(io:wr_buf(desc, &val, sizeof(val)));
};
def[export] e:str[void](st:io io, u16 val) io1:wr_u16 = {
	e:get(io1:wr_buf(io, &val, sizeof(val)));
};

/**
 * Write a signed, 16-bit integer to an I/O.
 *   @desc: The I/O descriptor.
 *   @val: The value.
 */
def[export] e:str[void](i32 desc, i16 val) io:wr_i16 = {
	e:get(io:wr_buf(desc, &val, sizeof(val)));
};
def[export] e:str[void](st:io io, i16 val) io1:wr_i16 = {
	e:get(io1:wr_buf(io, &val, sizeof(val)));
};

/**
 * Write an unsigned, 32-bit integer to an I/O.
 *   @desc: The I/O descriptor.
 *   @val: The value.
 */
def[export] e:str[void](i32 desc, u32 val) io:wr_u32 = {
	e:get(io:wr_buf(desc, &val, sizeof(val)));
};
def[export] e:str[void](st:io io, u32 val) io1:wr_u32 = {
	e:get(io1:wr_buf(io, &val, sizeof(val)));
};

/**
 * Write a signed, 32-bit integer to an I/O.
 *   @desc: The I/O descriptor.
 *   @val: The value.
 */
def[export] e:str[void](i32 desc, i32 val) io:wr_i32 = {
	e:get(io:wr_buf(desc, &val, sizeof(val)));
};
def[export] e:str[void](st:io io, i32 val) io1:wr_i32 = {
	e:get(io1:wr_buf(io, &val, sizeof(val)));
};

/**
 * Write an unsigned, 64-bit integer to an I/O.
 *   @desc: The I/O descriptor.
 *   @val: The value.
 */
def[export] e:str[void](i32 desc, u64 val) io:wr_u64 = {
	e:get(io:wr_buf(desc, &val, sizeof(val)));
};
def[export] e:str[void](st:io io, u64 val) io1:wr_u64 = {
	e:get(io1:wr_buf(io, &val, sizeof(val)));
};

/**
 * Write a signed, 64-bit integer to an I/O.
 *   @desc: The I/O descriptor.
 *   @val: The value.
 */
def[export] e:str[void](i32 desc, i64 val) io:wr_i64 = {
	e:get(io:wr_buf(desc, &val, sizeof(val)));
};
def[export] e:str[void](st:io io, i64 val) io1:wr_i64 = {
	e:get(io1:wr_buf(io, &val, sizeof(val)));
};

/**
 * Write a 32-bit float to an I/O.
 *   @desc: The I/O descriptor.
 *   @val: The value.
 */
def[export] e:str[void](i32 desc, fp32 val) io:wr_fp32 = {
	e:get(io:wr_buf(desc, &val, sizeof(val)));
};
def[export] e:str[void](st:io io, fp32 val) io1:wr_fp32 = {
	e:get(io1:wr_buf(io, &val, sizeof(val)));
};

/**
 * Write a 64-bit float to an I/O.
 *   @desc: The I/O descriptor.
 *   @val: The value.
 */
def[export] e:str[void](i32 desc, fp64 val) io:wr_fp64 = {
	e:get(io:wr_buf(desc, &val, sizeof(val)));
};
def[export] e:str[void](st:io io, fp64 val) io1:wr_fp64 = {
	e:get(io1:wr_buf(io, &val, sizeof(val)));
};

/**
 * Write a string with a 32-bit length prefix.
 *   @io: The I/O
 *   @str: The string.
 */
def[export] e:str[void](i32 desc, cpt:char str) io:wr_str32 = {
	var u32 len = str:len(str);

	e:get(io:wr_u32(desc, len));
	e:get(io:wr_buf(desc, str, len));
};
def[export] e:str[void](st:io io, cpt:char str) io1:wr_str32 = {
	var u32 len = str:len(str);

	e:get(io1:wr_u32(io, len));
	e:get(io1:wr_buf(io, str, len));
};

/**
 * Write an unsigned little-endian base-128 number.
 *   @io: The I/O.
 *   @val: The value.
 */
def[export] e:str[void](st:io io, u64 val) io1:wr_uleb128 = {
	var u8 t;

	for(;;) {
		t = u8{val} & 0x7F;
		val >>= 7;
		if(val == 0)
			break;

		e:get(io1:wr_u8(io, t | 0x80));
	}

	e:get(io1:wr_u8(io, t));
};

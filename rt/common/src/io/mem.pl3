/**
 * Internal buffer for memory-based files.
 *   @data: The data pointer.
 *   @sz: The size pointer.
 *   @idx, cap: The current index and capacity.
 */
tydef st:buf {
	pt:pt:void data;
	pt:u32 sz;
	u32 idx, cap;
};

/**
 * Create an I/O that reads and writes to memory.
 *   @data: Ref. The data pointer. Set to null for auto-allocation.
 *   @sz: Ref. The size pointer.
 *   &returns: The I/O.
 */
def[export] i32(pt:pt:void data, pt:u32 sz) io:mem_rdwr = {
	def e:str[void](u64 msg, pt:void param, pt:st:buf buf) func = {
		switch(msg) {
		case io:msg:read:
			fatal("FIXME stub");

		case io:msg:write: {
			var pt:st:io:write wr = param;

			if((buf->idx + wr->sz) > buf->cap) {
				buf->cap = 2 * (buf->idx + wr->sz);
				*buf->data = mem:realloc(*buf->data, buf->cap);
			}

			mem:copy(*buf->data + buf->idx, wr->src, wr->sz);

			buf->idx += wr->sz;
			if(buf->idx > *buf->sz)
				*buf->sz = buf->idx;

			wr->tot = wr->sz;
		} break;

		case io:msg:close:
			mem:free(buf);
			break;

		default:
			fatal("Unsupported I/O message.");
		}
	};

	var u32 cap;

	if(*data == null) {
		*data = mem:alloc(cap = 64);
		*sz = 0;
	}
	else
		cap = *sz;

	return io:make(&func, mem:make(st:buf{ data, sz, 0, *sz }));
};
def[export] st:io(pt:pt:void data, pt:u32 sz) io1:mem_rdwr = {
	def e:str[void](pt:st:buf buf, u32 id, pt:void arg) func = {
		switch(id) {
		case io:id:read:
			fatal("FIXME stub");

		case io:id:write: {
			var pt:st:io:write write = arg;

			if((buf->idx + write->sz) > buf->cap) {
				buf->cap = 2 * (buf->idx + write->sz);
				*buf->data = mem:realloc(*buf->data, buf->cap);
			}

			mem:copy(*buf->data + buf->idx, write->src, write->sz);

			buf->idx += write->sz;
			if(buf->idx > *buf->sz)
				*buf->sz = buf->idx;

			write->tot = write->sz;
		} break;

		case io:id:close:
			mem:free(buf);
			break;

		default:
			fatal("Unsupported I/O message.");
		}
	};

	var u32 cap;

	if(*data == null) {
		*data = mem:alloc(cap = 64);
		*sz = 0;
	}
	else
		cap = *sz;

	return st:io{ mem:make(st:buf{ data, sz, 0, *sz }), &func };
};

tydef st:read {
	cpt:void data;
	u32 idx, sz;
};

/**
 * Create a memory reader I/O.
 *   @data: The memory data.
 *   @sz: The size.
 *   &returns: The read-only I/O.
 */
def[export] st:io(cpt:void data, u32 sz) io:mem_read = {
	def e:str[void](pt:st:read ref, u32 id, pt:void arg) func = {
		switch(id) {
		case io:id:read: {
			var pt:st:io:read read = arg;

			read->tot = m:min_u32(read->sz, ref->sz - ref->idx);
			mem:copy(read->dst, ref->data + ref->idx, read->tot);
			ref->idx += read->tot;
		} break;

		case io:id:close:
			mem:free(ref);
			break;

		default:
			fatal("Unsupported I/O message.");
		}
	};

	return st:io{ mem:make(st:read{ data, 0, sz }), &func };
};

/**
 * Create a string reader I/O.
 *   @str: The string.
 *   &returns: The read-only I/O.
 */
def[export] st:io(cpt:char str) io:str_read = {
	return io:mem_read(str, str:len(str));
};

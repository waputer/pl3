/**
 * I/O callback function.
 *   @desc: The I/O descriptor.
 *   @arg: The argument.
 */
tydef[export] ty:io:call = e:str[void](i32 desc, pt:void arg);
tydef[export] ty:io1:call = e:str[void](st:io io, pt:void arg);

/**
 * I/O callback structure.
 */
tydef[export] st:io:call {
	cpt:ty:io:call func; /// Function
	cpt:void arg;        /// Argument
};
tydef[export] st:io1:call {
	cpt:ty:io1:call func;
	cpt:void arg;
};


/**
 * Process a callback.
 *   @call: The callback.
 *   @desc: The descriptor.
 */
def[export] e:str[void](st:io:call call, i32 desc) io:call_proc = {
	return call.func->(desc, pt:void{call.arg});
};
def[export] e:str[void](st:io1:call call, st:io io) io1:call_proc = {
	return call.func->(io, pt:void{call.arg});
};

/**
 * Create a callback that prints a string.
 *   @str: The string.
 *   &returns: The callback.
 */
def[export] st:io1:call(cpt:char str) io:call_str = {
	def e:str[void](st:io io, cpt:char str) func = {
		io1:fmt(io, "%s", str);
	};

	return st:io1:call{ &func, str };
};

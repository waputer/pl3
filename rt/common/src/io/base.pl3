/**
 * Mode flags
 */
def[export] u32 io:mode:perm   = 0x00FFFF, /// Permission mask
                io:mode:read   = 0x010000, /// Read
                io:mode:write  = 0x020000, /// Write
                io:mode:rdwr   = 0x030000, /// Both read and write
                io:mode:create = 0x040000, /// Create the file
                io:mode:append = 0x080000, /// Start with the position at the end of the file 
                io:mode:trunc  = 0x100000, /// Truncate the file if it exists
                io:mode:excl   = 0x200000, /// Fail if the file already exists
                io:mode:direct = 0x400000; /// Direct access (no buffering)

/**
 * Seek enumerator.
 */
def[export] u8 io:whence:set = 0x01, /// Offset from the beginning of the file
               io:whence:cur = 0x02, /// Offset from the current position
               io:whence:end = 0x03; /// Offset from the end of the file


/**
 * Open a file.
 *   @path: The file path.
 *   @mode: The mode.
 *   &returns: The kernel descriptor.
 */
def[export] e:str[i32](cpt:char path, u32 mode) io:open = {
	return e:get(os:open(path, mode));
};

/**
 * Duplicate a descriptor.
 *   @desc: The descriptor.
 *   &returns: The duplicate.
 */
def[export] i32(i32 desc) io:dup = {
	if(io:is_kern(desc))
		fatal("STUB fixme"); //FIXME
	else
		return io:copy(desc);
};

/**
 * Close a descriptor.
 *   @desc: The descriptor.
 */
def[export] void(i32 desc) io:close = {
	if(io:is_kern(desc))
		os:close(desc);
	else
		io:free(desc);
};


/**
 * I/O function type.
 *   @ref: The I/O refernce.
 *   @id; The message identifier.
 *   @arg: The argument.
 */
tydef[export] ty:io = e:str[void](pt:void ref, u32 id, pt:void arg);

/**
 * I/O type.
 *   @ref: The reference.
 *   @func: The function.
 */
tydef[export] st:io {
	pt:void ref;
	pt:ty:io func;
};

/**
 * Open an I/O.
 *   @path: The path.
 *   @mode: The mode.
 *   &returns: The I/O.
 */
def[export] e:str[st:io](cpt:char path, u32 mode) io1:open = {
	return io:std(e:get(os:open(path, mode)));
};

/**
 * Write to an I/O descriptor.
 *   @desc: The I/O descriptor.
 *   @src: The source.
 *   @sz: The size in bytes.
 *   &returns: The amount read in bytes.
 */
def[export] e:str[u32](i32 desc, pt:void dst, u32 sz) io:read = {
	if(io:is_user(desc)) {
		var st:io:read read = { dst, sz, 0 };

		e:get(io:msg(desc, io:msg:read, &read));

		return read.tot;
	}
	else
		return os:read(desc, dst, sz);
};

/**
 * Write to an I/O descriptor.
 *   @desc: The I/O descriptor.
 *   @src: The source.
 *   @sz: The size in bytes.
 *   &returns: The amount written in bytes.
 */
def[export] e:str[u32](i32 desc, cpt:void src, u32 sz) io:write = {
	if(io:is_user(desc)) {
		var st:io:write write = { src, sz, 0 };

		e:get(io:msg(desc, io:msg:write, &write));

		return write.tot;
	}
	else
		return os:write(desc, src, sz);
};


/**
 * Seek on an I/O descriptor.
 *   @desc: The I/O descriptor.
 *   @whence: Origin of the seek.
 *   @off: The offset in bytes.
 *   &returns: The old offset from the beginning of the file in bytes.
 */
def[export] e:str[u64](i32 desc, en:io:seek whence, i64 off) io:seek = {
	if(io:is_user(desc)) {
		//var st:io:seek write = { src, sz, 0 };

		//e:get(io:msg(desc, io:msg:write, &write));

		//return write.tot;
	}
	else
		return os:seek(desc, whence, off);
};

/**
 * Seek on an I/O descriptor from the beginning.
 *   @desc: The I/O descriptor.
 *   @off: The offset in bytes.
 *   &returns: The old offset from the beginning in bytes.
 */
def[export] e:str[u64](i32 desc, i64 off) io:seek:set = {
	return io:seek(desc, ev:io:seek:set, off);
};

/**
 * Seek on an I/O descriptor from the end.
 *   @desc: The I/O descriptor.
 *   @off: The offset in bytes.
 *   &returns: The old offset from the end in bytes.
 */
def[export] e:str[u64](i32 desc, i64 off) io:seek:end = {
	return io:seek(desc, ev:io:seek:end, off);
};

/**
 * Retrieve the current position for an I/O descriptor.
 *   @desc: The I/O descriptor.
 *   &returns: The offset from the beginning in bytes.
 */
def[export] e:str[u64](i32 desc) io:tell = {
	return io:seek(desc, ev:io:seek:cur, 0);
};

/**
 * Get a 32-bit float from a string.
 *   @str: The string.
 *   &returns: The float.
 */
//TODO better algo, actual constant parsing (look at those casts!)
//FIXME what about junk at the end
def[export] e:str[fp32](cpt:char str) str:get_fp32 = {
	var fp32 t = fp32{u32{0}};

	while((*str >= '0') && (*str <= '9')) {
		t = fp32{u32{10}} * t + fp32{*str} - fp32{u32{'0'}};
		str++;
	}

	if(*str == '.') {
		var fp32 r = fp32{u32{1}};

		str++;

		while((*str >= '0') && (*str <= '9')) {
			r /= fp32{u32{10}};
			t += r * (fp32{*str} - fp32{u32{'0'}});
			str++;
		}
	}

	if(*str == 'e') {
		var i32 e;
		var bool neg = false;

		str++;
		if(*str == '-') {
			str++;
			neg = true;
		}

		while((*str >= '0') && (*str <= '9')) {
			e = 10 * e + i32{*str} - i32{'0'};
			str++;
		}

		if(neg) {
			while(e-- > 0)
				t /= fp32{u32{10}};
		}
		else {
			while(e-- > 0)
				t *= fp32{u32{10}};
		}
	}

	return t;
};

/**
 * Get a 64-bit float from a string.
 *   @str: The string.
 *   &returns: The float.
 */
//TODO better algo, actual constant parsing (look at those casts!)
//FIXME what about junk at the end
def[export] e:str[fp64](cpt:char str) str:get_fp64 = {
	var fp64 t = fp64{u64{0}};

	while((*str >= '0') && (*str <= '9')) {
		t = fp64{u64{10}} * t + fp64{*str} - fp64{u64{'0'}};
		str++;
	}

	if(*str == '.') {
		var fp64 r = fp64{u64{1}};
		str++;

		while((*str >= '0') && (*str <= '9')) {
			r /= fp64{u64{10}};
			t += r * (fp64{*str} - fp64{u64{'0'}});
			str++;
		}
	}

	if(*str == 'e') {
		var i32 e;
		var bool neg = false;

		str++;
		if(*str == '-') {
			str++;
			neg = true;
		}

		while((*str >= '0') && (*str <= '9')) {
			e = 10 * e + i32{*str} - i32{'0'};
			str++;
		}

		if(neg) {
			while(e-- > 0)
				t /= fp64{u64{10}};
		}
		else {
			while(e-- > 0)
				t *= fp64{u64{10}};
		}
	}

	return t;
};

/**
 * Compute the length of a string.
 *   @str: The string.
 *   &returns: The length.
 */
def[export] u32(cpt:char str) str:len = {
	var u32 i = 0;

	while(str[i] != '\0')
		i++;

	return i;
};


/**
 * Search a string for a character, finding the first occurance.
 *   @str: The string.
 *   @ch: The character.
 *   &returns: The pointer if found, null otherwise.
 */
def[export] pt:char(cpt:char str, char ch) str:chr = {
	var u32 i;

	for(i = 0; str[i] != '\0'; i++) {
		if(str[i] == ch)
			return str + i;
	}

	return null;
};

/**
 * Search a string for a character, finding the last occurance.
 *   @str: The string.
 *   @ch: The character.
 *   &returns: The pointer if found, null otherwise.
 */
def[export] pt:char(cpt:char str, char ch) str:rchr = {
	var u32 i;

	for(i = str:len(str) - 1; i != -1; i--) {
		if(str[i] == ch)
			return str + i;
	}

	return null;
};


/**
 * Compare two strings for equality.
 *   @lhs: The first string.
 *   @rhs: The second string.
 *   &returns: True if equal.
 */
def[export] bool(cpt:char lhs, cpt:char rhs) str:equal = {
	for() {
		if(*lhs != *rhs)
			return false;

		if(*lhs == '\0')
			return true;

		lhs++;
		rhs++;
	}
};

/**
 * Compare two strings for order.
 *   @lhs: The first string.
 *   @rhs: The second string.
 *   &returns: Zero if equal, positive if `lhs > rhs`, negative if `lhs < rhs`..
 */
def[export] i8(cpt:char lhs, cpt:char rhs) str:cmp = {
	for() {
		if(*lhs < *rhs)
			return -1;
		else if(*lhs > *rhs)
			return 1;

		if(*lhs == '\0')
			return 0;

		lhs++;
		rhs++;
	}
};


/**
 * Copy a string.
 *   @dst: The destination.
 *   @src: The source.
 */
def[export] void(pt:char dst, cpt:char src) str:copy = {
	mem:copy(dst, src, str:len(src) + 1);
};

/**
 * Copy a string with a max length.
 *   @dst: The destination.
 *   @src: The source.
 *   @max: The maximum destination length including the null byte.
 */
def[export] void(pt:char dst, cpt:char src, u32 max) str:lcopy = {
	var u32 len;

	len = m:min_u32(str:len(src), max - 1);
	mem:copy(dst, src, len);
	dst[len] = '\0';
};

/**
 * Create a duplicate of a string.
 *   @str: The input string.
 *   &returns: The duplicated string. It must be freed with `mem:free`.
 */
def[export] pt:char(cpt:char str) str:dup = {
	var pt:char dup;

	dup = mem:alloc(str:len(str) + 1);
	str:copy(dup, str);

	return dup;
};

/**
 * Duplicate a string with a maximum length.
 *   @str: The string.
 *   @max: The maximum length.
 *   &returns: The duplicated string.
 */
// TODO manual count length so we don't walk a super long string
def[export] pt:char(cpt:char str, u32 max) str:ndup = {
	var u32 len;
	var pt:char ret;

	len = m:min_u32(str:len(str), max);
	ret = mem:alloc(len + 1);
	mem:copy(ret, str, len);
	ret[len] = '\0';

	return ret;
};


/**
 * Set a string.
 *   @dst: The destination string. Will be freed if non-null.
 *   @src: Consumed. The source string.
 */
def[export] void(pt:pt:char dst, pt:char src) str:set = {
	if(*dst != null)
		mem:free(*dst);

	*dst = src;
};


/**
 * Create a formatted string.
 *   @fmt: The format pattern.
 *   @...: The arguments.
 *   &returns: The string.
 */
def[export] pt:char(cpt:char fmt, ...) str:fmt = {
	var ty:args args = args:init();

	return str:fmtv(fmt, &args);
};

/**
 * Create a formatted string.
 *   @fmt: The format pattern.
 *   @args: The arguments.
 *   &returns: The string.
 */
def[export] pt:char(cpt:char fmt, pt:ty:args args) str:fmtv = {
	var i32 desc;
	var u32 sz = 64;
	var pt:char str = mem:alloc(64);

	desc = io:mem_rdwr(&str, &sz);
	io:fmtv(desc, fmt, args); /// FIXME e:ign
	io:wr_ch(desc, '\0'); /// FIXME e:ign
	io:close(desc);

	return str;
};

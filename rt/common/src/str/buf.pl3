/**
 * Buffer structure.
 *   @arr: The array.
 *   @len, cap: The length and capacity.
 */
tydef[export] st:str:buf {
	pt:char arr;
	u32 len, cap;
};


/**
 * Create an empty buffer.
 *   @init: The initial buffer capacity.
 *   &returns: The buffer.
 */
def[export] st:str:buf(u32 init) str:buf_new = {
	return st:str:buf{ mem:alloc(init), 0, init };
};

/**
 * Create a buffer from a raw array.
 *   @arr: The array.
 *   @len: The length.
 *   @cap: The capacity.
 *   &returns: The buffer.
 */
def[export] st:str:buf(pt:char arr, u32 len, u32 cap) str:buf_make = {
	return st:str:buf{ arr, len, cap };
};

/**
 * Delete a buffer.
 *   @buf: The buffer.
 */
def[export] void(st:str:buf buf) str:buf_delete = {
	mem:free(buf.arr);
};


/**
 * Reset the buffer to be zero length.
 *   @buf: The buffer.
 */
def[export] void(pt:st:str:buf buf) str:buf_reset = {
	buf->len = 0;
};

/**
 * Finish with a buffer. A null terminator is added to the string and the
 * internal buffer is returned. The return value should be freed with
 * `mem:free` or deleted with `str:buf_delete`.
 *   @buf: The buffer.
 *   &returns: The finished string.
 */
def[export] pt:char(pt:st:str:buf buf) str:buf_done = {
	str:buf_add_ch(buf, '\0');

	return buf->arr;
};


/**
 * Add a character to the buffer.
 *   @buf: The buffer.
 *   @ch: The character.
 */
def[export] void(pt:st:str:buf buf, char ch) str:buf_add_ch = {
	if(buf->len == buf->cap)
		buf->arr = mem:realloc(buf->arr, buf->cap *= 2);
	
	buf->arr[buf->len++] = ch;
};

/**
 * Add a string to the buffer not including the null terminator.
 *   @buf: The buffer.
 *   @str: The string.
 */
def[export] void(pt:st:str:buf buf, cpt:char str) str:buf_add_str = {
	while(*str != '\0')
		str:buf_add_ch(buf, *str++);
};

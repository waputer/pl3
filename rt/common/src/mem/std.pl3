/**
 * Zero a piece of memory.
 *   @dst: The destination.
 *   @sz: The size in bytes.
 */
def[export] void(pt:void dst, u32 sz) mem:zero = {
	var u32 i;
	var pt:u8 dst8 = dst;

	for(i = 0; i < sz; i++)
		dst8[i] = 0;
};

/**
 * Copy nono-verlapping buffeers.
 *   @dst: The destination.
 *   @src: The source.
 *   @sz: The size in bytes.
 */
def[export] void(pt:void dst, cpt:void src, u32 sz) mem:copy = {
	var u32 i;
	var pt:u8 dst8 = dst;
	var cpt:u8 src8 = src;

	if(dst < src) {
		for(i = 0; i < sz; i++)
			dst8[i] = src8[i];
	}
	else {
		for(i = sz - 1; i != -1; i--)
			dst8[i] = src8[i];
	}
};


/**
 * Swap the contents of two memory regions.
 *   @lhs: The left-hand side.
 *   @rhs: The right-hand side.
 *   @sz: The size of the memory regions.
 */
def[export] void(pt:void lhs, pt:void rhs, u32 sz) mem:swap = {
	var u8 t;
	var u32 i;
	var pt:u8 a = lhs, b = rhs;

	for(i = 0; i < sz; i++) {
		t = a[i];
		a[i] = b[i];
		b[i] = t;
	}
};

/**
 * Determine if memory contents are zero.
 *   @mem: The memory contents.
 *   @sz: The size.
 *   &returns: True if zero.
 */
def[export] bool(cpt:void mem, u32 sz) mem:iszero = {
	var u32 i;

	for(i = 0; i < sz; i++) {
		if(cpt:u8{mem}[i] != 0)
			return false;
	}

	return true;
};

/**
 * Determine if two memory buffers are equal. This is not constant time.
 *   @lhs: The left-hand buffer.
 *   @rhs: The right-hand right.
 *   @sz: The buffer sizes.
 *   &returns: True if equal.
 */
def[export] bool(cpt:void lhs, cpt:void rhs, u32 sz) mem:equal = {
	var u32 i;

	for(i = 0; i < sz; i++) {
		if(cpt:u8{lhs}[i] != cpt:u8{rhs}[i])
			return false;
	}

	return true;
};

/**
 * Compare two buffers for order. This is not constant time.
 *   @lhs: The left-hand buffer.
 *   @rhs: The right-hand right.
 *   @sz: The buffer sizes.
 *   &returns: Zero if equal, positive if `lhs > rhs`, negative if `lhs < rhs`.
 */
def[export] i8(cpt:void lhs, cpt:void rhs, u32 sz) mem:cmp = {
	var u32 i;

	for(i = 0; i < sz; i++) {
		if(cpt:u8{lhs}[i] > cpt:u8{rhs}[i])
			return 1;
		else if(cpt:u8{lhs}[i] < cpt:u8{rhs}[i])
			return -1;
	}

	return 0;
};

def[export] void(bool cond) assert = { //FIXME where does this go
	if(!cond)
		fatal("Assert failure.");
};

/*
 * misc
 */
def[export,extern] void(i32 code) os:exit;
def[export,extern] void() os:abort;

/*
 * i/o
 */
def[export,extern] e:str[i32](cpt:char path, u32 mode) os:open;
def[export,extern] e:str[void](i32 kd) os:close;

def[export,extern] e:str[u32](i32 kd, pt:void dst, u32 sz) os:read;
def[export,extern] e:str[u32](i32 kd, cpt:void src, u32 sz) os:write;

def[export,extern] e:str[void](i32 kd, u64 sz) os:trunc;
def[export,extern] e:str[u64](i32 kd, en:io:seek whence, i64 off) os:seek;
def[export,extern] e:str[u64](i32 kd) os:tell;

def[export,extern] e:str[u32](pt:st:io1:poll set, u32 cnt, i64 to) os:poll; //FIXME remove
def[export,extern] e:str[u32](pt:st:io:poll set, u32 cnt, i64 to) os:poll2;

def[export,extern] e:str[i32](u32 init) os:event;

/*
 * memory
 */
def[export, extern] pt:void(u32 sz) os:alloc;
def[export, extern] pt:void(pt:void ptr, u32 sz) os:realloc;
def[export, extern] void(pt:void ptr) os:free;

/*
 * time
 */
def[export, extern] u64() os:usec;
def[export, extern] void(u64 usec) os:usleep;

/*
 * threads
 */
tydef[export] st:mt:thread { };
tydef[export] ty:mt:thread = pt:st:mt:thread;
def[export,extern] e:str[ty:mt:thread](pt:(pt:void(pt:void)), pt:void, pt:void) mt:thread_new;
def[export,extern] pt:void(ty:mt:thread) mt:thread_join;
def[export,extern] void(ty:mt:thread) mt:thread_detach;

//FIXME these
//tydef[export] st:mt:once { };
//tydef[export] ty:mt:once = pt:st:mt:once;
//def[export,extern] ty:mt:once mt:once:init;

tydef[export] ty:pthread_mutex_t = ar[40]:u8;
def[export,extern] i32(pt:ty:pthread_mutex_t, cpt:void) pthread_mutex_init;
def[export,extern] i32(pt:ty:pthread_mutex_t) pthread_mutex_destroy;
def[export,extern] i32(pt:ty:pthread_mutex_t) pthread_mutex_lock;
def[export,extern] i32(pt:ty:pthread_mutex_t) pthread_mutex_unlock;

tydef[export] ty:pthread_once_t = i32;
def[export] ty:pthread_once_t PTHREAD_ONCE_INIT = 0;
def[export,extern] i32(pt:ty:pthread_once_t, pt:(void(void))) pthread_once;


tydef[export] ty:mt:once = ty:pthread_once_t;

def[export] ty:mt:once mt:once:init = 0;

def[export] void(pt:ty:mt:once once, pt:(void(void)) func) mt:once = {
	pthread_once(once, func);
};

tydef[export] ty:mt:mutex = ty:pthread_mutex_t;

def[export] void(pt:ty:mt:mutex mutex, cpt:void opts) mt:mutex_init = { pthread_mutex_init(mutex, null); };
def[export] void(pt:ty:mt:mutex mutex) mt:mutex_done = { pthread_mutex_destroy(mutex); };
def[export] void(pt:ty:mt:mutex mutex) mt:mutex_lock = { pthread_mutex_lock(mutex); };
def[export] void(pt:ty:mt:mutex mutex) mt:mutex_unlock = { pthread_mutex_unlock(mutex); };



// FIXME move task to new (common?) file
/**
 * Task structure.
 */
tydef[export] st:mt:task {};
tydef[export] ty:mt:task = pt:st:mt:task;
tydef st:mt:task {
	ty:mt:thread thread; /// Thread
	ar[2]:i32 pipe;      /// Pipe
	i32 priv, pub;       /// Private and public decriptors

	pt:ty:mt:task:func func; /// Callback function
	pt:void arg;             /// Callback argumwent
};

/**
 * Task function.
 *   @desc: The message descriptor.
 *   @arg: The callback argument.
 */
tydef[export] ty:mt:task:func = void(i32 desc, pt:void arg);


/**
 * Create a task.
 *   @func: The function.
 *   @arg: The argument.
 *   &returns: The task.
 */
def[export] e:str[ty:mt:task](pt:ty:mt:task:func func, pt:void arg) mt:task_new = {
	var pt:st:mt:task task;

	task = mem:new(st:mt:task);
	onerr mem:free(task);

	task->func = func;
	task->arg = arg;

	pipe(*task->pipe);
	task->priv = io:make(&fn_in, task);
	io:link(task->priv, task->pipe[0], io:evt:rd, &fn_read, task);

	task->thread = e:get(mt:thread_new(&fn_thread, task, null));

	return task;
};

/**
 * Delete a task.
 *   @task: The task.
 */
def[export] void(ty:mt:task task) mt:task_delete = {
	io:remask(task->priv, io:evt:term);
	io:write(task->pipe[1], getref(u8{0}), 1); // FIXME e:ign

	mt:thread_join(task->thread);
	io:free(task->priv);
	os:close(task->pipe[0]);
	os:close(task->pipe[1]);
	mem:free(task);
};


/**
 * Thread function.
 *   @task: The task.
 */
def pt:void(pt:st:mt:task task) fn_thread = {
	task->func->(task->priv, task->arg);
	
	return null;
};



def[export,extern] i32(pt:i32) pipe; // FIXME abstract this

def e:str[u32](i32 desc, u32 evt, pt:void arg) fn_read = {
	return 0;
};
/**
 * Handle internal descriptor.
 */
def e:str[void](u64 msg, pt:void param, pt:void arg) fn_in = {

};

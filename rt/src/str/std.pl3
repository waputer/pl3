/**
 * Compute the length of a string.
 *   @str: The string.
 *   &returns: The length.
 */
def[export] u32(cpt:char str) str:len = {
	var u32 i = 0;

	while(str[i] != '\0')
		i++;

	return i;
};

/**
 * Copy a string.
 *   @dst: The destination.
 *   @src: The source.
 */
def[export] void(pt:char dst, cpt:char src) str:copy = {
	mem:copy(dst, src, str:len(src) + 1);
};

/**
 * Create a duplicate of a string.
 *   @str: The input string.
 *   &returns: The duplicated string. It must be freed with `mem:free`.
 */
def[export] pt:char(cpt:char str) str:dup = {
	var pt:char dup;

	dup = mem:alloc(str:len(str) + 1);
	str:copy(dup, str);

	return dup;
};


def[export] bool(cpt:char lhs, cpt:char rhs) str:equal = {
	for() {
		if(*lhs != *rhs)
			return false;

		if(*lhs == '\0')
			return true;

		lhs++;
		rhs++;
	}
};

def[export] i8(cpt:char lhs, cpt:char rhs) str:cmp = {
	for() {
		if(*lhs < *rhs)
			return -1;
		else if(*lhs > *rhs)
			return 1;

		if(*lhs == '\0')
			return 0;

		lhs++;
		rhs++;
	}
};


/**
 * Search a string for a character, finding the first occurance.
 *   @str: The string.
 *   @ch: The character.
 *   &returns: The pointer if found, null otherwise.
 */
def[export] pt:char(cpt:char str, char ch) str:chr = {
	var u32 i;
	var cpt:char ret = null;

	for(i = 0; str[i] != '\0'; i++) {
		if(str[i] == ch)
			ret = str + i;
	}

	return pt:char{ret};
};

/**
 * Search a string for a character, finding the last occurance.
 *   @str: The string.
 *   @ch: The character.
 *   &returns: The pointer if found, null otherwise.
 */
def[export] pt:char(cpt:char str, char ch) str:rchr = {
	var u32 i;
	var cpt:char ret = null;

	for(i = str:len(str) - 1; i != -1; i++) {
		if(str[i] == ch)
			ret = str + i;
	}

	return pt:char{ret};
};

/**
 * Determine if a character is a digit.
 *   @ch: The character.
 *   &returns: True if a digit.
 */
def[export] bool(i16 ch) lex:is_digit = {
	return (ch >= '0') && (ch <= '9');
};

/**
 * Determine if a character is an alphabetic character.
 *   @ch: The character.
 *   &returns: True if an alphabetical character.
 */
def[export] bool(i16 ch) lex:is_alpha = {
	return ((ch >= 'a') && (ch <= 'z')) || ((ch >= 'A') && (ch <= 'Z')) || (ch >= 128);
};

/**
 * Determine if a character is an alphabetic character or digit.
 *   @ch: The character.
 *   &returns: True if an alphabetical character or digit.
 */
def[export] bool(i16 ch) lex:is_alnum = {
	return lex:is_digit(ch) || lex:is_alpha(ch);
};

/**
 * Determine if a character is a any whitespace character.
 *   @ch: The character.
 *   &returns: True if a space.
 */
def[export] bool(i16 ch) lex:is_space = {
	return (ch == ' ') || (ch == '\t') || (ch == '\r') || (ch == '\n');
};

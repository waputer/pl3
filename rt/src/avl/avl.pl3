/**
 * Tree reference comparison and deletion functions.
 */
tydef[export] ty:avl:cmp = i8(cpt:void, cpt:void);
tydef[export] ty:avl:delete = void(pt:void);


/**
 * Tree root structure.
 *   @cnt: The number of nodes.
 *   @node: The root node.
 *   @cmp: The comparison function.
 */
tydef[export] st:avl:root {
	u32 cnt;
	pt:st:avl:node node;
	pt:ty:avl:cmp cmp;
};

/**
 * Tree node struture.
 *   @bal: The current balance.
 *   @ref: The reference
 *   @parent, left, right: The parent, left, and right nodes.
 */
tydef[export] st:avl:node {
	i8 bal;
	cpt:void ref;
	pt:st:avl:node parent, left, right;
};


/**
 * Create an empty tree root.
 *   @cmp: The comparison function.
 *   &returns: The empty root.
 */
def[export] st:avl:root(pt:ty:avl:cmp cmp) avl:root_new = {
	return st:avl:root{ 0, null, cmp };
};

/**
 * Delete an entire tree from the root.
 *   @root: The tree root.
 *   @off: The offset to the reference.
 *   @delete: The deletion callback.
 */
def[export] void(pt:st:avl:root root, i32 off, pt:ty:avl:delete delete) avl:root_delete = {
	node_delete(root->node, off, delete);
};
def void(pt:st:avl:node node, i32 off, pt:ty:avl:delete delete) node_delete = { // FIXME: this should be inlined above
	if(node == null)
		return;

	node_delete(node->left, off, delete);
	node_delete(node->right, off, delete);
	delete->(pt:void{node} - off);
};


/**
 * Retrieve the first node from an AVL tree root.
 *   @root: The root.
 *   &returns: The first node or null.
 */
def[export] pt:st:avl:node(pt:st:avl:root root) avl:root_first = {
	return (root->node != null) ? avl:node_first(root->node) : null;
};

/**
 * Retrieve the last node from an AVL tree root.
 *   @root: The root.
 *   &returns: The last node or null.
 */
def[export] pt:st:avl:node(pt:st:avl:root root) avl:root_last = {
	return (root->node != null) ? avl:node_last(root->node) : null;
};


/**
 * Lookup a node by reference.
 *   @root; The root.
 *   @ref: The reference.
 *   &returns: The node or null.
 */
def[export] pt:st:avl:node(pt:st:avl:root root, cpt:void ref) avl:root_get = {
	var i8 cmp;
	var pt:st:avl:node node;

	node = root->node;
	while(node != null) {
		cmp = root->cmp->(node->ref, ref);
		if(cmp < 0)
			node = node->right;
		else if(cmp > 0)
			node = node->left;
		else
			return node;
	}

	return null;
};

def[export] pt:st:avl:node(pt:st:avl:root root, cpt:void ref) avl:root_atleast = {
	var i8 cmp = 0;
	var pt:st:avl:node node = root->node, prev = null;

	while(node != null) {
		prev = node;

		cmp = root->cmp->(node->ref, ref);
		if(cmp < 0)
			node = node->right;
		else if(cmp > 0)
			node = node->left;
		else
			return node;
	}

	if(cmp < 0)
		return avl:node_next(prev);
	else
		return prev;
};

def[export] pt:st:avl:node(pt:st:avl:root root, cpt:void ref) avl:root_atmost = {
	var i8 cmp = 0;
	var pt:st:avl:node node = root->node, prev = null;

	while(node != null) {
		prev = node;

		cmp = root->cmp->(node->ref, ref);
		if(cmp < 0)
			node = node->right;
		else if(cmp > 0)
			node = node->left;
		else
			return node;
	}

	if(cmp > 0)
		return avl:node_prev(prev);
	else
		return prev;
};


/**
 * Insert a node onto the root.
 *   @root; The root.
 *   @node: The node.
 */
def[export] void(pt:st:avl:root root, pt:st:avl:node add) avl:root_add = {
	var i8 cmp;
	var pt:pt:st:avl:node cur;
	var pt:st:avl:node node, parent;

	parent = null;
	cur = &root->node;

	while(*cur != null) {
		parent = *cur;
		cmp = root->cmp->((*cur)->ref, add->ref);
		if(cmp <= 0)
			cur = &(*cur)->right;
		else
			cur = &(*cur)->left;
	}

	*cur = add;
	add->bal = 0;
	add->parent = parent;
	add->left = null;
	add->right = null;
	node = add;
	root->cnt++;

	while((parent = node->parent) != null) {
		parent->bal += getdir(node);
		node = node->parent;
		if(node->bal > 1) {
			if(node->right->bal == -1)
				node->right = rotright(node->right);

			*noderef(node, root) = rotleft(node);
			node = *noderef(node, root);
			break;
		}
		else if(node->bal < -1) {
			if(node->left->bal == 1)
				node->left = rotleft(node->left);

			node = *noderef(node, root) = rotright(node);
			break;
		}
		else if(node->bal == 0)
			break;
	}
};

/**
 * Eliminate a node from the root.
 *   @root; The root.
 *   @rem: The node to remove.
 */
def[export] void(pt:st:avl:root root, pt:st:avl:node rem) avl:root_elim = {
	var i8 bal;
	var pt:st:avl:node node;

	if(rem->left != null) {
		node = avl:node_last(rem->left);
		bal = getdir(node);
	}
	else if(rem->right != null) {
		node = avl:node_first(rem->right);
		bal = getdir(node);
	}
	else {
		node = null;
		bal = (rem->parent != null) ? getdir(rem) : 0;
	}

	root->cnt--;
	*noderef(rem, root) = node;

	if(node != null) {
		var pt:st:avl:node parent;

		if(node->left != null) {
			node->left->parent = node->parent;
			*noderef(node, root) = node->left;
		}
		else if(node->right != null) {
			node->left->parent = node->parent;
			*noderef(node, root) = node->left;
		}
		else
			*noderef(node, root) = null;

		parent = (node->parent == rem) ? node : node->parent;

		node->bal = rem->bal;
		node->parent = rem->parent;
		node->left = rem->left;
		node->right = rem->right;

		if(node->left != null)
			node->left->parent = node;

		if(node->right != null)
			node->right->parent = node;

		node = parent;
	}
	else
		node = rem->parent;

	if(node != null) {
		for() {
			node->bal -= bal;

			if(node->bal > 1) {
				if(node->right->bal == -1)
					node->right = rotright(node->right);

				node = *noderef(node, root) = rotleft(node);

			}
			else if(node->bal < -1) {
				if(node->left->bal == 1)
					node->left = rotleft(node->left);

				node = *noderef(node, root) = rotright(node);

			}

			if((node->bal != 0) || (node->parent == null))
				break;

			bal = getdir(node);
			node = node->parent;
		}
	}
};

/**
 * Remove a node from the root.
 *   @root; The root.
 *   @ref: The reference.
 *   &returns: The removed node if the reference is found.
 */
def[export] pt:st:avl:node(pt:st:avl:root root, cpt:void ref) avl:root_rem = {
	var i8 bal;
	var pt:st:avl:node rem, node;

	rem = avl:root_get(root, ref);
	if(rem == null)
		return null;

	if(rem->left != null) {
		node = avl:node_last(rem->left);
		bal = getdir(node);
	}
	else if(rem->right != null) {
		node = avl:node_first(rem->right);
		bal = getdir(node);
	}
	else {
		node = null;
		bal = (rem->parent != null) ? getdir(rem) : 0;
	}

	root->cnt--;
	*noderef(rem, root) = node;

	if(node != null) {
		var pt:st:avl:node parent;

		if(node->left != null) {
			node->left->parent = node->parent;
			*noderef(node, root) = node->left;
		}
		else if(node->right != null) {
			node->left->parent = node->parent;
			*noderef(node, root) = node->left;
		}
		else
			*noderef(node, root) = null;

		parent = (node->parent == rem) ? node : node->parent;

		node->bal = rem->bal;
		node->parent = rem->parent;
		node->left = rem->left;
		node->right = rem->right;

		if(node->left != null)
			node->left->parent = node;

		if(node->right != null)
			node->right->parent = node;

		node = parent;
	}
	else
		node = rem->parent;

	if(node != null) {
		for() {
			node->bal -= bal;

			if(node->bal > 1) {
				if(node->right->bal == -1)
					node->right = rotright(node->right);

				node = *noderef(node, root) = rotleft(node);

			}
			else if(node->bal < -1) {
				if(node->left->bal == 1)
					node->left = rotleft(node->left);

				node = *noderef(node, root) = rotright(node);

			}

			if((node->bal != 0) || (node->parent == null))
				break;

			bal = getdir(node);
			node = node->parent;
		}
	}

	return rem;
};


/**
 * Create the node structure.
 *   @ref: The reference.
 *   &returns: The node.
 */
def[export] st:avl:node(cpt:void ref) avl:node = {
	return st:avl:node{ .ref = ref };
};


/**
 * Retrieve the first node starting at a node.
 *   @node: The node.
 *   &returns: The first node in the subtree.
 */
def[export] pt:st:avl:node(pt:st:avl:node node) avl:node_first = {
	while(node->left != null)
		node = node->left;
	
	return node;
};

/**
 * Retrieve the last node starting at a node.
 *   @node: The node.
 *   &returns: The last node in the subtree.
 */
def[export] pt:st:avl:node(pt:st:avl:node node) avl:node_last = {
	while(node->right != null)
		node = node->right;
	
	return node;
};

/**
 * Retrieve the previous node.
 *   @node: The current node.
 *   &returns: The previous node or null.
 */
def[export] pt:st:avl:node(pt:st:avl:node node) avl:node_prev = {
	if(node->left != null) {
		node = node->left;

		while(node->right != null)
			node = node->right;

		return node;
	}
	else {
		while(node->parent != null) {
			if(node->parent->right == node)
				break;

			node = node->parent;
		}

		return node->parent;
	}
};

/**
 * Retrieve the next node.
 *   @node: The current node.
 *   &returns: The next node or null if there is no next node.
 */
def[export] pt:st:avl:node(pt:st:avl:node node) avl:node_next = {
	if(node->right != null) {
		node = node->right;

		while(node->left != null)
			node = node->left;

		return node;
	}
	else {
		while(node->parent != null) {
			if(node->parent->left == node)
				break;

			node = node->parent;
		}

		return node->parent;
	}
};

/**
 * Rotate right on a given node.
 *   @node; The base node.
 *   &returns: The new base node.
 */
def pt:st:avl:node(pt:st:avl:node node) rotright = {
	var pt:st:avl:node tmp;

	tmp = node->left;
	node->left = tmp->right;
	tmp->right = node;

	node->bal++;
	if(tmp->bal < 0)
		node->bal -= tmp->bal;

	tmp->bal++;
	if(node->bal > 0)
		tmp->bal += node->bal;

	tmp->parent = node->parent;
	node->parent = tmp;

	if(node->left != null)
		node->left->parent = node;

	return tmp;
};

/**
 * Rotate left on a given node.
 *   @node; The base node.
 *   &returns: The new base node.
 */
def pt:st:avl:node(pt:st:avl:node node) rotleft = {
	var pt:st:avl:node tmp;

	tmp = node->right;
	node->right = tmp->left;
	tmp->left = node;

	node->bal--;
	if(tmp->bal > 0)
		node->bal -= tmp->bal;

	tmp->bal--;
	if(node->bal < 0)
		tmp->bal += node->bal;

	tmp->parent = node->parent;
	node->parent = tmp;

	if(node->right != null)
		node->right->parent = node;

	return tmp;
};

/**
 * Get a reference to the node from either the parent or root.
 *   @node: The node.
 *   @root: The root.
 *   &returns: The reference.
 */
def pt:pt:st:avl:node(pt:st:avl:node node, pt:st:avl:root root) noderef = {
	if(node->parent == null)
		return &root->node;
	else if(node->parent->left == node)
		return &node->parent->left;
	else
		return &node->parent->right;
};

/**
 * Retrieve the direction of a node relative to its parent.
 *   @node: The node.
 *   &returns: The direction as '1' or '-1'.
 */
def i8(pt:st:avl:node node) getdir = {
	return (node->parent->right == node) ? 1 : -1;
};


/**
 * Pointer comparison function.
 *   @lhs: The left-hand side.
 *   @rhs: The right-hand side.
 *   &returns: Their order.
 */
def[export] i8(cpt:void lhs, cpt:void rhs) avl:cmp_ptr = {
	if(lhs > rhs)
		return 1;
	else if(lhs < rhs)
		return -1;
	else
		return 0;
};

/**
 * Unsigned 32-bit integer comparison function.
 *   @lhs: The left-hand side.
 *   @rhs: The right-hand side.
 *   &returns: Their order.
 */
def[export] i8(cpt:void lhs, cpt:void rhs) avl:cmp_u32 = {
	if(*cpt:u32{lhs} > *cpt:u32{rhs})
		return 1;
	else if(*cpt:u32{lhs} < *cpt:u32{rhs})
		return -1;
	else
		return 0;
};

/**
 * Signed 32-bit integer comparison function.
 *   @lhs: The left-hand side.
 *   @rhs: The right-hand side.
 *   &returns: Their order.
 */
def[export] i8(cpt:void lhs, cpt:void rhs) avl:cmp_i32 = {
	if(*cpt:u32{lhs} > *cpt:u32{rhs})
		return 1;
	else if(*cpt:u32{lhs} < *cpt:u32{rhs})
		return -1;
	else
		return 0;
};

/**
 * Unsigned 64-bit integer Pointer comparison function.
 *   @lhs: The left-hand side.
 *   @rhs: The right-hand side.
 *   &returns: Their order.
 */
def[export] i8(cpt:void lhs, cpt:void rhs) avl:cmp_u64 = {
	if(*cpt:u64{lhs} > *cpt:u64{rhs})
		return 1;
	else if(*cpt:u64{lhs} < *cpt:u64{rhs})
		return -1;
	else
		return 0;
};

/**
 * String comparison function.
 *   @lhs: The left-hand side.
 *   @rhs: The right-hand side.
 *   &returns: Their order.
 */
def[export] i8(cpt:void lhs, cpt:void rhs) avl:cmp_str = {
	return str:cmp(lhs, rhs);
};

/**
 * I/O callback function.
 *   @file: The output file.
 *   @arg: The argument.
 */
tydef[export] ty:io:call = e:str[void](st:io:file, pt:void arg);

/**
 * I/O callback structure.
 *   @func: The function.
 *   @arg: The argument.
 */
tydef[export] st:io:call {
	cpt:ty:io:call func;
	cpt:void arg;
};

def[export] st:io:call io:call_null = { null, null };


/**
 * Create a callback that prints a string.
 *   @str: The string.
 *   &returns: The callback.
 */
def[export] st:io:call(cpt:char str) io:call_str = {
	def e:str[void](st:io:file file, cpt:char str) func = {
		io:fmt(file, "%s", str);
	};

	return st:io:call{ &func, str };
};


/**
 * Print formatted output to standard out.
 *   @fmt: The format string.
 *   @...: The print arguments.
 */
def[export] void(cpt:char fmt, ...) print = {
	var ty:args args = args:init();

	io:fmtv(io:stdout, fmt, &args); //FIXME: warn
};

/**
 * Print formatted output to standard error.
 *   @fmt: The format string.
 *   @...: The print arguments.
 */
def[export] void(cpt:char fmt, ...) eprint = {
	var ty:args args = args:init();

	io:fmtv(io:stderr, fmt, &args); //FIXME: warn
};



var bool fatal_term = false;
// TODO all of the below
def[export] void(cpt:char fmt, ...) fatal = {
	if(fatal_term)
		os:exit(2);

	fatal_term = true;

	var ty:args args = args:init();
	var ar[16]:pt:void trace;

	io:fmtv(io:stderr, fmt, &args);
	io:fmt(io:stderr, "\n");

	os:exit(1);

	bi:btrace(&trace, 16 * sizeof(pt:void));
	//bi:btrace_dump(&trace, 6 * sizeof(pt:void));

	var u32 i;
	var pt:char str;

	for(i = 0; i < 16; i++) {
		if(trace[i] == null)
			break;

		str = e:req(dwarf:getfunc("./pl3", trace[i]));
		if(str != null)
			print("  0x%p \"%s\"\n", trace[i], str);
		else
			print("  0x%p\n", trace[i]);
	}

	os:exit(1);
};

// TODO
def[export] void() unreachable = {
	fatal("Unreachable code.");
};

def[export] void(bool cond) assert = {
	if(!cond)
		fatal("Assert failure.");
};



/**
 * Write formatted output to a file.
 *   @file: The file.
 *   @fmt: The format string.
 *   @...: The print arguments.
 */
def[export] e:str[void](st:io:file file, cpt:char fmt, ...) io:fmt = {
	var ty:args args = args:init();

	return io:fmtv(file, fmt, &args);
};

/**
 * Write formatted output to a file.
 *   @file: The file.
 *   @fmt: The format string.
 *   @args: The print arguments.
 */
tydef en:type { "u64", "i64" };
// FIXME this entire function
def[export] e:str[void](st:io:file file, cpt:char fmt, pt:ty:args args) io:fmtv = {
	while(*fmt != '\0') {
		if(*fmt == '%') {
			fmt++;

			if(*fmt == '{') {
				var en:type type;
				fmt++;

				if((fmt[0] == 'u') && (fmt[1] == '6') && (fmt[2] == '4')) {
					type = ev:type:u64;
					fmt += 3;
				}
				else if((fmt[0] == 'i') && (fmt[1] == '6') && (fmt[2] == '4')) {
					type = ev:type:i64;
					fmt += 3;
				}
				else
					fatal("Invalid format specifier.");

				if(*fmt != '}')
					fatal("Invalid format specifier.");

				fmt++;
				switch(type) {
				case ev:type:u64: io:fmt_u64(file, args:get(args, u64), 10, 0); break;
				case ev:type:i64: io:fmt_i64(file, args:get(args, i64), 10, 0); break;
				}
			}
			else {
				var u32 wid = 0;

				while((*fmt >= '0') && (*fmt <= '9')) {
					wid = 10 * wid + u32{*fmt - '0'};
					fmt++;
				}

				if(*fmt == '%')
					e:get(io:wr_ch(file, '%'));
				else if(*fmt == 'c')
					io:wr_ch(file, args:get(args, char));
				else if(*fmt == 'b')
					io:fmt_u32(file, args:get(args, u32), 2, wid);
				else if(*fmt == 'u')
					io:fmt_u32(file, args:get(args, u32), 10, wid);
				else if(*fmt == 'x')
					io:fmt_u32(file, args:get(args, u32), 16, wid);
				else if(*fmt == 'd')
					io:fmt_i32(file, args:get(args, i32), 10, wid);
				else if(*fmt == 'p')
					io:fmt_u64(file, args:get(args, u64), 16, 16);
				else if(*fmt == 's')
					io:fmt_str(file, args:get(args, cpt:char));
				else if(*fmt == 'C')
					e:get(io:fmt_call(file, args:get(args, st:io:call)));
				else
					fatal("Invalid format specifier '%c'", *fmt);

				fmt++;
			}
		}
		else {
			io:write(file, fmt, 1);
			fmt++;
		}
	}
};


/**
 * Format a string.
 *   @file: The file.
 *   @str: The string.
 */
def[export] void(st:io:file file, cpt:char str) io:fmt_str = {
	io:write(file, str, str:len(str));
};

/**
 * Write a 32-bit, signed integer to a file.
 *   @file: The file.
 *   @val: The value to write.
 *   @base: The base.
 *   @wid: The width.
 */
def[export] void(st:io:file file, i32 val, u8 base, u32 wid) io:fmt_i32 = {
	if(val < 0) {
		val = -val;
		io:wr_ch(file, '-');

		if(wid > 0)
			wid--;
	}

	io:fmt_u32(file, u32{val}, base, wid);
};

/**
 * Write a 32-bit, unsigned integer to a file.
 *   @file: The file.
 *   @val: The value to write.
 *   @base: The base.
 *   @wid: The width.
 */
def[export] void(st:io:file file, u32 val, u8 base, u32 wid) io:fmt_u32 = {
	var ar[11]:char buf;
	var i32 k;
	var u32 i = 10;

	do {
		buf[i--] = mkdig(u8{val % u32{base}}, base);
		val /= u32{base};
	} while(val != 0);

	for(k = 10 - i32{i}; k < i32{wid}; k++)
		io:wr_ch(file, '0');

	io:write(file, *buf + i + 1, 10 - i);
};

/**
 * Write a 64-bit, signed integer to a file.
 *   @file: The file.
 *   @val: The value to write.
 *   @base: The base.
 *   @wid: The width.
 */
def[export] void(st:io:file file, i64 val, u8 base, u32 wid) io:fmt_i64 = {
	if(val < 0) {
		val = -val;
		io:wr_ch(file, '-');

		if(wid > 0)
			wid--;
	}

	io:fmt_u64(file, u64{val}, base, wid);
};

/**
 * Write a 64-bit, unsigned integer to a file.
 *   @file: The file.
 *   @val: The value to write.
 *   @base: The base.
 *   @wid: The width.
 */
def[export] void(st:io:file file, u64 val, u8 base, u32 wid) io:fmt_u64 = {
	var ar[21]:char buf;
	var i32 k;
	var u32 i = 20;

	do {
		buf[i--] = mkdig(u8{val % u64{base}}, base);
		val /= u64{base};
	} while(val != 0);

	for(k = 20 - i32{i}; k < i32{wid}; k++)
		io:wr_ch(file, '0');

	io:write(file, *buf + i + 1, 20 - i);

};

/**
 * Format a call.
 *   @file: The file.
 *   @call: The call.
 */
def[export] e:str[void](st:io:file file, st:io:call call) io:fmt_call = {
	return call.func->(file, pt:void{call.arg});
};

/**
 * Create a digit.
 *   @val: The integer value.
 *   @base: The number base.
 *   &returns: The digit.
 */
def char(u8 val, u8 base) mkdig = {
	if(val >= 10)
		return 'A' + (val - 10);
	else
		return '0' + val;
};

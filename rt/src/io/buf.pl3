/**
 * Instance structure.
 *   @file: The underlying file.
 *   @buf: The buffer.
 *   @i, n, sz: The index, number buffered, and size of the buffer.
 *   @mode: The current mode.
 */
tydef[export] en:io:buf { none, rd, wr };
tydef[export] st:io:buf {
	st:io:file file;
	pt:u8 buf;
	u32 i, n, sz;
	en:io:buf mode;
};


/**
 * Create a new buffered file.
 *   @file: The file.
 *   &returns: The buffered file.
 */
def[export] pt:st:io:buf(st:io:file file) io:buf_new = {
	return mem:make(st:io:buf{ file, mem:alloc(4096), 0, 0, 4096, ev:io:buf:none });
};

/**
 * Delete a buffered file, leaving the file open.
 *   @inst: The buffered file.
 */
def[export] void(pt:st:io:buf inst) io:buf_delete = {
	mem:free(inst->buf);
	mem:free(inst);
};

/**
 * Close a buffered file.
 *   @buf: The buffered file.
 */
def[export] e:str[void](pt:st:io:buf buf) io:buf_close = {
	onerr io:buf_delete(buf);

	e:get(io:close(buf->file));
	io:buf_delete(buf);
};


def[export] st:io:file(pt:st:io:buf buf) io:buf_file = {
	def st:io:file_iface iface = { &io:buf_read, &io:buf_write, null, &io:buf_close };

	return st:io:file{ buf, &iface };
};


/**
 * Flush pending reads or writes, resetting its state to the default.
 *   @inst: The buffered file.
 */
def[export] e:str[void](pt:st:io:buf buf) io:buf_flush = {
	switch(buf->mode) {
	case ev:io:buf:none:
		break;

	case ev:io:buf:rd:
		e:get(io:seek_cur(buf->file, -i64{buf->n - buf->i}));
		break;

	case ev:io:buf:wr:
		fatal("FIXME stub");
		break;
	}

	buf->mode = ev:io:buf:none;
	buf->i = buf->n = 0;
};

/**
 * Read from a buffered file.
 *   @buf: The buffered file.
 *   @dst: The destination buffer.
 *   @sz: The read size in bytes.
 *   &returns: The amount read in bytes.
 */
def[export] e:str[u32](pt:st:io:buf inst, pt:void dst, u32 sz) io:buf_read = {
	var u32 avail;

	if(inst->mode != ev:io:buf:rd) {
		io:buf_flush(inst);

		if(sz >= inst->sz)
			return e:get(io:read(inst->file, dst, sz));

		inst->n = e:get(io:read(inst->file, inst->buf, inst->sz));
		if(inst->n == 0)
			return 0;

		inst->mode = ev:io:buf:rd;
		inst->i = 0;
	}

	avail = inst->n - inst->i;
	if(sz > avail) {
		mem:copy(dst, inst->buf + inst->i, avail);
		inst->mode = ev:io:buf:none;
		inst->i = inst->n = 0;
		
		return avail + e:get(io:buf_read(inst, dst + avail, sz - avail));
	}

	mem:copy(dst, inst->buf + inst->i, sz);
	inst->i += sz;
	if(inst->i == inst->n) {
		inst->mode = ev:io:buf:none;
		inst->i = inst->n = 0;
	}

	return sz;
};

def[export] e:str[u32](pt:st:io:buf buf, cpt:void src, u32 sz) io:buf_write = {
	return io:write(buf->file, src, sz);
};

var[export] u32 mem:cnt = 0;
var[export] st:avl:root mem:root = { 0, null, &avl:cmp_ptr };


/**
 * Perform a raw allocation skipping any checking or verification.
 *   @sz: The allocation size in bytes.
 *   &returns: The memory pointer.
 */
def[export] pt:void(u32 sz) mem:raw_alloc = {
	var pt:void ptr;

	ptr = os:mmap(0, u64{sz} + 256, os:PROT_READ | os:PROT_WRITE, os:MAP_ANONYMOUS | os:MAP_PRIVATE, 0, 0);
	*pt:u32{ptr} = sz;
	//print("%p %u %p\n", ptr, sz, ptr + sz);
	//*pt:u32{ptr + sz} = 1;
	//*pt:u32{ptr + sz} = 0;

	var u32 i;
	for(i = 0; i < sz; i++)
		*pt:u8{ptr + i + 4} = 0x8F;

	for(i = 4; i < 256; i += 4)
		*pt:u32{ptr + sz + i} = 0xcafebeef;

	return ptr + 4;
};

def[export] u32(pt:void ptr) mem:raw_size = {
	return *pt:u32{ptr - 4};
};

def[export] void(pt:void ptr) mem:raw_free = {
	ptr -= 4;
	var u32 sz = *pt:u32{ptr};
	//print("free %u\n", *pt:u32{ptr + sz + 4});
	var u32 i;
	for(i = 4; i < 256; i += 4) {
		if(*pt:u32{ptr + sz + i} != 0xcafebeef)
			fatal("corrupt");
	}
	os:munmap(ptr, u64{*pt:u32{ptr} + 48});
};


/**
 * Allocate memory.
 *   @sz: The allocation size in bytes.
 *   &returns: The memory pointer.
 */
def[export] pt:void(u32 sz) mem:alloc = {
	mem:cnt++;

	return mem:sys_alloc(sz);
};

/**
 * Allocate memory and initialize it to zero.
 *   @sz: The allocation size in bytes.
 *   &returns: The memory pointer.
 */
def[export] pt:void(u32 sz) mem:create = {
	var pt:void ptr;

	ptr = mem:alloc(sz);
	mem:zero(ptr, sz);

	return ptr;
};

/**
 * Duplicate memory.
 *   @ptr: The object pointer.
 *   @sz: The size.
 *   &returns: The duplicated memory.
 */
def[export] pt:void(cpt:void ptr, u32 sz) mem:dup = {
	var pt:void dup;

	dup = mem:alloc(sz);
	mem:copy(dup, ptr, sz);

	return dup;
};

/**
 * Reallocate memory. Any old data is copied to the new pointer.
 *   @ptr: The memory pointer.
 *   @sz: The new size.
 *   &returns: The new pointer.
 */
def[export,extern] void(pt:void arr, u32 cnt) bi:btrace; // FIXME: all of this
def[export,extern] void(pt:void arr, u32 cnt) bi:btrace_dump;
def[export] pt:void(pt:void ptr, u32 sz) mem:realloc = {
	var pt:void new;

	// FIXME: we have to do this better
	new = mem:alloc(sz);
	mem:copy(new, ptr, m:min_u32(sz, mem:size(ptr)));
	mem:free(ptr);

	return new;
};

/**
 * Free memory.
 *   @ptr: The memory pointer.
 */
def[export] void(pt:void ptr) mem:free = {
	mem:cnt--;
	mem:sys_free(ptr);
};

/**
 * Free memory if it is non-null.
 *   @ptr: The pointer.
 */
def[export] void(pt:void ptr) mem:erase = {
	if(ptr != null)
		mem:free(ptr);
};

/**
 * Retrieve the size for an allocation.
 *   @ptr: The memory pointer.
 *   &returns: The allocation size.
 */
def[export] u32(pt:void ptr) mem:size = {
	return mem:sys_size(ptr);
};


def[export] void() mem:assert = {
	var u32 n = 0;
	var pt:st:avl:node node;

	if(mem:cnt == 0)
		return;

/*
	for(node = avl:root_first(&mem:root); node != null; node = avl:node_next(node)) {
		var pt:pt:void trace = pt:void{node} + sizeof(st:avl:node);

		print("alloc %u\n", n++);
		//bi:btrace_dump(ptr, 6 * sizeof(pt:void));
		var u32 i;
		for(i = 0; i < 6; i++) {
			if(trace[i] == null)
				break;

			var pt:char str;
			str = e:req(dwarf:getfunc("./pl3", trace[i]));
			if(str != null) {
				print("  0x%p \"%s\"\n", trace[i], str);
				mem:free(str);
			}
			else
				print("  0x%p\n", trace[i]);
		}
	}
	*/

	fatal("Missing %u allocations", mem:cnt);
};


/**
 * Arena structure.
 *   @alloc, sm: The allocated and free trees.
 */
tydef st:arena {
	st:avl:root alloc, sm;
};

/**
 * Bin structure.
 *   @tag: The bin type tag.
 *   @sz: The bin size
 *   @addr: The target address.
 *   @node: The AVL node.
 */
tydef en:bin { sm, huge };
tydef st:bin {
	en:bin tag;
	u32 sz;
	pt:void addr;
	st:avl:node node;
	ar[7]:u8 pad; //FIXME
};


/**
 * Small bin structure.
 *   @head: The allocation header.
 *   @node: The free memory node.
 *   @free, alloc: The free and allocated offset.
 */
tydef st:sm_bin {
	st:bin head;
	st:avl:node node;
	ar[7]:u8 pad; //FIXME
	u16 free, alloc;
	u32 pad2; //FIXME
};

/**
 * Small memory structure.
 *   @sz, next: The memory size and next memory offset.
 *   @pad: The padding.
 */
tydef st:sm_mem {
	u16 sz, next;
	u32 pad; //FIXME
};

tydef st:huge {
	st:bin head;
	pt:void ptr;
	u64 sz;
};


/*
 * local declarations
 */
var bool init = false;
var st:arena arena;


/**
 * Helper for initializing the data structures.
 */
def void() start = {
	if(init)
		return;

	init = true;
	arena.alloc = avl:root_new(&avl:cmp_ptr);
	arena.sm = avl:root_new(&avl:cmp_ptr);

/*
	var pt:void p;

	var u32 i;

	return;
	p = mem:alloc(16);
	for(i = 0; i < 100; i++) {
		mem:alloc(64);
		p = mem:realloc(p, 32);
		mem:zero(p, 32);
		p = mem:realloc(p, 48);
		mem:zero(p, 48);
		p = mem:realloc(p, 0);
		p = mem:realloc(p, 128);
		p = mem:realloc(p, 192);
		p = mem:realloc(p, 256);
		mem:zero(p, 256);
	}
	mem:free(p);

	print("OSDJKFLSDJFKL\n");
	*/
	//mem:test:check();
};

/**
 * Panic, printing an error and terminating the program. There is nothing to
 * be done at this point, the memory is corrupted.
 */
def void() panic = {
	fatal("Memory corruption.");
};


/**
 * Allocate memory.
 *   @sz: The size.
 *   &returns: The allocated memory.
 */
def[export] pt:void(u32 sz) mem:sys_alloc = {
	start();

	//print("alloc %u\n", sz);

	if(sz >= (2*1024))
		return huge_alloc(sz);
	//else if(sz >= 1024)
		//fatal("big alloc");
	//else if(sz >= 256)
		//fatal("lg alloc");
	//else if(sz >= 4*1024)
		//fatal("FIXME alloc too big");
	else
		return sm_alloc(sz);
};

/**
 * Free an allocation.
 *   @ptr; The pointer.
 */
def[export] void(pt:void ptr) mem:sys_free = {
	var pt:st:bin bin;
	var pt:st:avl:node node;

	node = avl:root_atmost(&arena.alloc, ptr);
	if(node == null)
		fatal("Attempted to free invalid pointer.");

	bin = getparent(node, st:bin, node);
	if((ptr < bin->addr) || (ptr >= (bin->addr + bin->sz)))
		fatal("Attempted to free invalid pointer.");

	switch(bin->tag) {
	case ev:bin:sm: sm_free(pt:st:sm_bin{bin}, ptr); break;
	case ev:bin:huge: huge_free(pt:st:huge{bin}, ptr); break;
	default: panic();
	}
};

/**
 * Retrieve the alloction size of a pointer. This should _never_ be used to
 * determine if a pointer is a valid allocation. For example, you cannot use
 * it to determine if an allocationed was freed with `mem:free` since another
 * call to `mem:alloc` may reuse the space, especially if your program is
 * multithreaded.
 *   @ptr: The pointer.
 *   &returns: The size if a valid allocation, zero otherwise.
 */
def[export] u32(pt:void ptr) mem:sys_size = {
	var pt:st:bin bin;
	var pt:st:avl:node node;

	node = avl:root_atmost(&arena.alloc, ptr);
	if(node == null)
		return 0;

	bin = getparent(node, st:bin, node);
	if((ptr < bin->addr) || (ptr >= (bin->addr + bin->sz)))
		return 0;

	switch(bin->tag) {
	case ev:bin:sm: return sm_size(pt:st:sm_bin{bin}, ptr);
	case ev:bin:huge: return huge_size(pt:st:huge{bin}, ptr);
	}

	panic();
};

/**
 * Dump the memory information to a file.
 *   @file: The file.
 */
def[export] void(st:io:file file) mem:sys_dump = {
	var u32 n;
	var pt:st:avl:node node;

	io:fmt(file, "arena #0\n");
	
	n = 0;
	for(node = avl:root_first(&arena.sm); node != null; node = avl:node_next(node)) {
		var u16 off;
		var pt:st:sm_bin bin;
		var pt:st:sm_mem mem;

		bin = getparent(node, st:sm_bin, node);

		io:fmt(file, "\tsmall #%u (free=%u)\n", n++, u32{bin->node.ref});

		io:fmt(file, "\t\tfree");
		off = bin->free;
		while(off != 0) {
			mem = sm_at(bin, off);
			io:fmt(file, " %u:%u", u32{off}, mem->sz);
			off = mem->next;
		}
		io:fmt(file, "\n");

		io:fmt(file, "\t\talloc");
		off = bin->alloc;
		while(off != 0) {
			mem = sm_at(bin, off);
			io:fmt(file, " %u:%u", u32{off}, mem->sz);
			off = mem->next;
		}
		io:fmt(file, "\n");
	}
};


/**
 * Create a huge (full-page) allocation.
 *   @sz: The size.
 */
def pt:void(u32 sz) huge_alloc = {
	var pt:st:huge huge;

	sz = m:align32(sz, 4096);
	huge = mem:sys_alloc(sizeof(st:huge));
	huge->sz = u64{sz};
	huge->ptr = e:req(os:alloc(huge->sz));
	huge->head = st:bin{ ev:bin:huge, 1, huge->ptr, avl:node(huge->ptr) };
	avl:root_add(&arena.alloc, &huge->head.node);

	return huge->ptr;
};

def void(pt:st:huge huge, pt:void ptr) huge_free = {
	avl:root_elim(&arena.alloc, &huge->head.node);
	os:free(ptr, huge->sz);
	mem:sys_free(huge);
};

/**
 * Retrieve the size of a huge allocation.
 *   @bin: The bin.
 *   @ptr: The pointer.
 *   &returns: The size.
 */
def u32(pt:st:huge bin, pt:void ptr) huge_size = {
	return u32{bin->sz};
};


/**
 * Create a small (under 256 bytes) allocation.
 *   @sz: The size.
 *   &returns: The allocation.
 */
def pt:void(u32 sz) sm_alloc = {
	var pt:u16 off;
	var pt:st:sm_bin bin;
	var pt:st:sm_mem mem;
	var pt:st:avl:node node;

	if(sz > 2048) //FIXME use constants
		fatal("too big");

	if(sz < 8) sz = 8; //FIXME remove once we have tiny allocs
	sz = m:align32(sz, 8) + sizeof(st:sm_mem);

	node = avl:root_atleast(&arena.sm, pt:void{sz});
	if(node == null)
		bin = sm_new();
	else
		bin = getparent(node, st:sm_bin, node);

	off = sm_sel(bin, u16{sz});
	mem = sm_at(bin, *off);
	*off = mem->next;

	if(mem->sz >= u16{sz + sizeof(st:sm_mem)}) {
		var pt:st:sm_mem next;

		next = pt:void{mem} + sz;
		next->sz = mem->sz - u16{sz};
		next->next = bin->free;
		bin->free = sm_off(bin, next);
		mem->sz = u16{sz};
	}

	mem->next = bin->alloc;
	bin->alloc = sm_off(bin, mem);

	sm_fix(bin);

	return pt:void{mem} + sizeof(st:sm_mem);
};

/**
 * Free a small allocation.
 *   @bin: The bin.
 *   @ptr: The pointer.
 */
def void(pt:st:sm_bin bin, pt:void ptr) sm_free = {
	var pt:u16 off;
	var pt:st:sm_mem mem, iter;

	ptr -= sizeof(st:sm_mem);

	off = &bin->alloc;
	for() {
		if(*off == 0) {
			fatal("Attempted to free invalid pointer.");
		}

		mem = sm_at(bin, *off);
		if(mem == ptr)
			break;

		off = &mem->next;
	}

	*off = mem->next;
	mem->next = bin->free;
	bin->free = sm_off(bin, mem);

	off = &mem->next;
	while(*off != 0) {
		iter = sm_at(bin, *off);

		if((pt:void{mem} + mem->sz) == iter) {
			mem->sz += iter->sz;
			*off = iter->next;
		}
		else if((pt:void{iter} + iter->sz) == mem) {
			iter->sz += mem->sz;
			bin->free = mem->next;
			mem = iter;
			off = &iter->next;
		}
		else
			off = &iter->next;
	}

	sm_fix(bin);
};

/**
 * Retrieve the size of a small allocation.
 *   @bin: The bin.
 *   @ptr: The pointer.
 *   &returns: The size.
 */
def u32(pt:st:sm_bin bin, pt:void ptr) sm_size = {
	var u16 off;
	var pt:st:sm_mem mem;

	ptr -= sizeof(st:sm_mem);

	off = bin->alloc;
	while(off != 0) {
		mem = sm_at(bin, off);
		if(mem == ptr)
			return u32{mem->sz - sizeof(st:sm_mem)};

		off = mem->next;
	}

	panic();
	return 0;
};


/**
 * Create a small bin.
 *   &returns: The small bin.
 */
def pt:st:sm_bin() sm_new = {
	var pt:st:sm_bin sm;

	sm = e:req(os:alloc(4096)); //FIXME maybe switch to large allocs?
	sm->head = st:bin{ ev:bin:sm, 4096, sm, avl:node(sm) };
	sm->node = avl:node(pt:void{u32{4096 - sizeof(st:sm_bin)}}); //FIXME remove cast
	sm->free = sizeof(st:sm_bin);
	sm->alloc = 0;

	avl:root_add(&arena.sm, &sm->node);
	avl:root_add(&arena.alloc, &sm->head.node);
	//print("add %p\n", sm->head.node.ref);

	*sm_at(sm, sm->free) = st:sm_mem{ 4096 - sizeof(st:sm_bin), 0 };

	return sm;
};

/**
 * Fix the small bin after a malloc/free.
 *   @bin: The bin.
 */
def void(pt:st:sm_bin bin) sm_fix = {
	var u16 off, max = 0;
	var pt:st:sm_mem mem;

	off = bin->free;
	while(off != 0) {
		mem = sm_at(bin, off);
		max = m:max_u16(max, mem->sz);
		off = mem->next;
	}

	if(bin->node.ref != pt:void{max}) {
		avl:root_elim(&arena.sm, &bin->node);
		bin->node.ref = pt:void{max};
		avl:root_add(&arena.sm, &bin->node);
	}
};

/**
 * Select a memory that fits the requested size.
 *   @bin: The bin.
 *   @sz: The requested size.
 *   &returns: The offset reference.
 */
def pt:u16(pt:st:sm_bin bin, u16 sz) sm_sel = {
	var pt:st:sm_mem mem;
	var pt:u16 off = &bin->free;

	while(*off != 0) {
		mem = sm_at(bin, *off);
		if(mem->sz >= sz)
			return off; //TODO select smallest

		off = &mem->next;
	}

	panic();
};

/**
 * Retrieve the memory at a given offset.
 *   @bin: The small bin.
 *   @off: The offset.
 *   &returns; The memory.
 */
def pt:st:sm_mem(pt:st:sm_bin bin, u16 off) sm_at = {
	return pt:void{bin} + off;
};

/**
 * Retrieve the offset of a small memory structure.
 *   @bin: The small bin.
 *   @mem; The memory.
 *   &returns: The offset.
 */
def u16(pt:st:sm_bin bin, pt:st:sm_mem mem) sm_off = {
	return u16{pt:void{mem} - pt:void{bin}};
};

def[export,export] u32(u32 a, u32 b) m:min_u32 = {
	return (a < b) ? a : b;
};

/**
 * Compute the maximum of unsigned 16-bit integers.
 *   @a: The first number.
 *   @b: The second number.
 *   &returns: The maximum.
 */
def[export] u16(u16 a, u16 b) m:max_u16 = {
	return (a > b) ? a : b;
};


/**
 * Align a 32-bit integer.
 *   @val: The value.
 *   @align: The alignment.
 *   &returns: The aligned value.
 */
def[export] u32(u32 val, u32 align) m:align32 = {
	return val - 1 - (val - 1) % align + align;
};



def[export] u64(u64 v) rnd:xor64 = {
	v ^= 0x72cc4d6d13f39e1b;
	v ^= v << 13;
	v ^= v >> 7;
	v ^= v << 17;
	return v;
};


def[export] void() mem:test:check = {
	var u32 i, u;
	var u64 t, r = 0;
	var ar[1024]:pt:void arr;

	mem:zero(&arr[0], sizeof(arr)); //FIXME *arr

	mem:sys_free(mem:sys_alloc(4096));
	for(i = 0; i < 16*1024; i++) {
		r = rnd:xor64(r);
		t = u64{r} % 1024;

		if(arr[t] == null) {
			u = u32{r = rnd:xor64(r)} % 256;

			arr[t] = mem:sys_alloc(u);
			mem:zero(arr[t], u);
		}
		else {
			if((u32{r = rnd:xor64(r)} & 1) == 0) {
				u = u32{r = rnd:xor64(r)} % 256;
				arr[t] = mem:realloc(arr[t], u);
				mem:zero(arr[t], u);
			}
			else {
				mem:sys_free(arr[t]);
				arr[t] = null;
			}
		}
	}

	mem:sys_dump(io:stdout);

	for(i = 0; i < 1024; i++) {
		if(arr[i] != null)
			mem:sys_free(arr[i]);
	}

	mem:sys_dump(io:stdout);
	fatal("GOOD");
};

/**
 * Allocate memory.
 *   @sz: The allocation size.
 *   &returns: The allocation.
 */
def[export] pt:void(u32 sz) os:alloc = {
	var pt:void ptr;

	if(sz == 0)
		sz = 1;

	ptr = malloc(u64{sz});
	if(ptr == null)
		fatal("Allocation failed. %s (%d).", strerror(geterr()), geterr());

	return ptr;
};

/**
 * Resize a memory allocation.
 *   @ptr: The allocation.
 *   @sz: The new allocation size.
 *   &returns: The resized allocation.
 */
def[export] pt:void(pt:void ptr, u32 sz) os:realloc = {
	if(sz == 0)
		sz = 1;
	
	ptr = realloc(ptr, u64{sz});
	if(ptr == null)
		fatal("Allocation failed. %s (%d).", strerror(geterr()), geterr());

	return ptr;
};

/**
 * Free a memory allocation.
 *   @ptr: The allocation.
 */
def[export] void(pt:void ptr) os:free = {
	free(ptr);
};

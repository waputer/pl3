tydef[export] ty:pthread_t = u64;
def[export,extern] i32(pt:ty:pthread_t, cpt:void, pt:ty:mt:thread:func, pt:void) pthread_create;
def[export,extern] i32(ty:pthread_t, pt:pt:void) pthread_join;
def[export,extern] i32(ty:pthread_t) pthread_detach;



/**
 * Common threading types.
 *   @ty:mt:thread: Thread object.
 */
tydef ty:mt:thread = ty:pthread_t;

/**
 * Thread function.
 *   @arg: The argument.
 *   &returns: The thread return value.
 */
tydef[export] ty:mt:thread:func = pt:void(pt:void arg);

/**
 * Create a new thread.
 *   @func: The thread function.
 *   @arg: The function argument.
 *   @opts: The options.
 *   &returns: The thread.
 */
def[export] e:str[ty:mt:thread](pt:ty:mt:thread:func func, pt:void arg, cpt:void opts) mt:thread_new = {
	var i32 err;
	var ty:mt:thread thread;

	err = pthread_create(&thread, null, func, arg);
	if(err != 0)
		e:fmt("Failed to create thread. %s (%d).", strerror(err), err);

	return thread;
};

/**
 * Join with a thread.
 *   @thread: The thread.
 *   &returns: The return vlaue.
 */
def[export] pt:void(ty:mt:thread thread) mt:thread_join = {
	var i32 err;
	var pt:void ret;

	err = pthread_join(thread, &ret);
	if(err != 0)
		fatal("Failed to join thread. %s (%d).", strerror(err), err);

	return ret;
};

/**
 * Detach with a thread.
 *   @thread: The thread.
 */
def[export] void(ty:mt:thread thread) mt:thread_detach = {
	var i32 err;

	err = pthread_detach(thread);
	if(err != 0)
		fatal("Failed to detach thread. %s (%d).", strerror(err), err);
};

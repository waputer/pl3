/**
 * Enumerator structure.
 *   @val: The value list.
 */
tydef[export] st:pl3:enum {
	pt:st:pl3:enval val;
};

/**
 * Create an enumerator.
 *   @val: Consumed. The enumerated value list.
 *   &returns: The enumerator.
 */
def[export] pt:st:pl3:enum(pt:st:pl3:enval val) pl3:enum_new = {
	return mem:make(st:pl3:enum{ val });
};

/**
 * Delete an enumerator.
 *   @enum: The enumerator.
 */
def[export] void(pt:st:pl3:enum enum) pl3:enum_delete = {
	pl3:enval_clear(enum->val);
	mem:free(enum);
};


/**
 * Find a value in an enumerator.
 *   @enum: The enumerator.
 *   @id: The value identifier (no prefix).
 *   &returns: The value if found, null otherwise.
 */
def[export] pt:st:pl3:enval(pt:st:pl3:enum enum, cpt:char id) pl3:enum_find = {
	var pt:st:pl3:enval val;

	for(val = enum->val; val != null; val = val->next) {
		if(str:equal(val->id, id))
			return val;
	}

	return null;
};


/**
 * Enumerated value structure.
 *   @id: The identifier.
 *   @expr: The expression, if given.
 *   @next: The next enumerated value.
 */
tydef[export] st:pl3:enval {
	pt:char id;
	pt:st:pl3:expr expr;

	pt:st:pl3:enval next;
};

/**
 * Create an enumerator value. 
 *   @id: The identifier.
 *   @expr: Optional. Consumed. The expression.
 *   &returns: The enumerated value.
 */
def[export] pt:st:pl3:enval(pt:char id, pt:st:pl3:expr expr) pl3:enval_new = {
	return mem:make(st:pl3:enval{ id, expr, null });
};

/**
 * Delete an enumerated value.
 *   @val: The enumerated value.
 */
def[export] void(pt:st:pl3:enval val) pl3:enval_delete = {
	mem:free(val->id);
	pl3:expr_erase(val->expr);
	mem:free(val);
};

/**
 * Clear a list of enumerated value.
 *   @val: The enumerated value list.
 */
def[export] void(pt:st:pl3:enval val) pl3:enval_clear = {
	var pt:st:pl3:enval tmp;
	
	while(val != null) {
		val = (tmp = val)->next;
		pl3:enval_delete(tmp);
	}
};


/**
 * Enumerated reference structure.
 *   @id: The identifier.
 *   @val: The value.
 */
tydef[export] st:pl3:enref {
	pt:char id;
	pt:st:pl3:enval val;
};

/**
 * Create an enumerated reference. 
 *   @id: Consumed. The identifier.
 *   &returns: The enumerated value.
 */
def[export] pt:st:pl3:enref(pt:char id) pl3:enref_new = {
	return mem:make(st:pl3:enref{ id, null });
};

/**
 * Delete an enumerated reference.
 *   @ref: The enumerated reference.
 */
def[export] void(pt:st:pl3:enref ref) pl3:enref_delete = {
	mem:free(ref->id);
	mem:free(ref);
};
